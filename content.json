{"pages":[{"title":"","text":"about本名 牟展佑（WilliamMou）個人訊息 台灣．新北市就讀：國立清華大學 清華學院學士班 My Group 松山高中資訊研究社 SITCON 2019 議程組 SITCON CAMP 2019 文創組、課活組 COSCUP 2019 廠務組 專案項目Chatbots in Finance 專案描述 獨立製作專案 以Python語言撰寫 為Telegram所設計 專案應用 適用記帳與收支統計 適用借貸款與驗證功能 Blockchain architecture implementation 專案描述 獨立研究專案 以Python語言撰寫 以比特幣為研究對象 專案應用 了解與認識區塊鏈架構 作為進階研究的墊腳石","link":"/about/index.html"}],"posts":[{"title":"AI 學習筆記整理","text":"AI學習筆記 常見名詞觀念釐清 人工智能的範疇 專家系統 機器學習 進化計算 模糊邏輯 計算機視覺 自然語言處理 推薦系統等 機器學習William Mou’s Github學習書籍：Python機器學習 Python基礎套件教學SciPy Lecture Notes 中文版 numpy中文教程 傳統算法 決策樹 聚類 貝葉斯分類 支持向量機 EM Adaboost 距离及相似度度量方法 學習方法的分類 半監督學習 集成學習 深度學習 監督學習（如分類問題） 分類法 訓練數據集中學習 回歸分析導出模型 對新數據做出預測 回歸預測 預測變數+反映變數 發覺變數間的關係 找出變數的適合曲線 強化學習 與環境互動改善自身技能 透過測量函數回傳度量質 透過方式最大化獎勵： 嘗試錯誤 審議式規劃 非監督學習（如聚類問題）沒有已知的結果和獎勵函數，透過探索數據本身的結構得到資訊 探索式數據分析技術 允許組織技術至有意義的「子族群」 使特徵有一定程度的相似性，發現特殊分群 深度學習，一種實現機器學習的技術TensorFlow 筆記从系统和代码实现角度解析TensorFlow的内部实现原理莫煩Python 背景 深度學習本來並不是一種獨立的學習方法，其本身也會用到有監督和無監督的學習方法來訓練深度神經網絡。但由於近幾年該領域發展迅猛，一些特有的學習手段相繼被提出（如殘差網絡），因此越來越多的人將其單獨看作一種學習的方法。 最初的深度學習是利用深度神經網絡來解決特徵表達的一種學習過程。深度神經網絡本身並不是一個全新的概念，可大致理解為包含多個隱含層的神經網絡結構。為了提高深層神經網絡的訓練效果，人們對神經元的連接方法和激活函數等方面做出相應的調整。 缺點 深度學習模型需要大量的訓練數據，才能展現出神奇的效果，但現實生活中往往會遇到小樣本問題，此時深度學習方法無法入手，傳統的機器學習方法就可以處理。 有些領域，採用傳統的簡單的機器學習方法，可以很好地解決了，沒必要非得用複雜的深度學習方法。 深度學習的思想，來源於人腦的啟發，但絕不是人腦的模擬，舉個例子，給一個三四歲的小孩看一輛自行車之後，再見到哪怕外觀完全不同的自行車，小孩也十有八九能做出那是一輛自行車的判斷，也就是說，人類的學習過程往往不需要大規模的訓練數據，而現在的深度學習方法顯然不是對人腦的模擬。 理念 Science is NOT a battle, it is a collaboration. We all build on each other’s ideas. Science is an act of love, not war. Love for the beauty in the world that surrounds us and love to share and build something together. That makes science a highly satisfying activity, emotionally speaking! 這段話的大致意思是，科學不是戰爭而是合作，任何學科的發展從來都不是一條路走到黑，而是同行之間互相學習，互相借鑒，博採眾長，相得益彰，站在巨人的肩膀上不斷前行。機器學習的研究也是一樣，你死我活那是邪教，開放包容才是正道。 介紹ppt SRGANAIJT梯度下降法手算範例講解tags : AI Junior Talk 人工智慧青年論壇 [name=牟展祐] [time=2018,2,23] [name=牟展祐] [time=2018,6,23]多層感知機 參考資料來源與出處：人工智能、机器学习和深度学习的区别？ 作者：育心。附資源與完整指導！帶你從零開始掌握 Python 機器學習深度學習 Deep Learning：中文學習資源整理Machine Learning: Python 機器學習：使用PythonMachine Learning: Python 機器學習：使用Python資源速查表 書籍選購Python機器學習Deep Learning：用Python進行深度學習的基礎理論實作今天不學機器學習，明天就被機器取代：從Python入手+演算法零起點Python機器學習快速入門","link":"/2019/09/13/AI-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%E6%95%B4%E7%90%86/"},{"title":"Black Hat Asia 年會參與心得 By Adr","text":"Black Hat Asia 年會參與心得 By Adr Author : William Mou 關於故事分析評審口味 ouo HITCON TALK APT 網站漏洞 滲透 Black Hat 專案大概類型 整合網站分析工具/VPS服務測試工具 假網路基地台/偵測假網路基地台 藍牙設備測試工具 機器學習偵測惡意程式 一些知名到爛掉的專案 ex:Flare VM 挑選審稿委員一直很愛的題目挑選以前從未被選上的冷門題目 自動化程式碼的編譯器（機器碼層級混淆） 夠冷門對大部分人來說挺髒不想摸的領域 Sum Up:怎麼提高題目被錄取的機會 整合某個領域的技術成一篇稿件，整理得相當完美接近精華的境界eg:筆記小神童 你的題目有夠冷門，冷到可以唱Let It Go，並且整合的夠完善可以讓聽眾耳目一新 研究擁有重大突破，輾壓全場 趁研討會打架時投稿。（黑暗兵法） 研究方式 養成訂閱資安推播文章，有趣的文章會由固定的資安專家推播 外國很多資安專家總是很大嘴巴的愛把研究進度/新的研究成果貼在推特上 XDD SubTee 與他的朋友 投稿專案細節–讓後門再次偉大前導 C++ Calling convention 由C++經由編譯器轉成組合語言，可以由組合語言猜測c++語法 若習慣使用IDA Pro反推c++，則可以如下隱藏實際要用的function –&gt; 干擾研究人員辨別惡意程式123456__ASM psuh 0 呼叫 fun1 fun1: 呼叫message_box 防毒軟體 使用特徵碼辨別惡意程式 藉由adr寫的C#，在得到機械碼後，可以將函數位置更改 成品 藉由__ASM替換或轉換呼叫，就可以做到大程度破壞原程式碼的邏輯 插入垃圾程式碼 混淆程式碼邏輯 克服問題克服英文口說障礙 練到背起來 台灣人英文其實沒這ㄇ爛 事前練習 每一頁投影片大概要提到什麼重點 用英文句子練習這一頁怎麼解釋 相信自己英文沒那麼差 即使你英文講得很爛，大部分老外會很尊重的聽完你的分享 但僅限於社群分享 把不尊重的外國人當Son Of Bitch，上面不適用於學術論文場合 跨國投稿分享 在Speaker晚宴認識一堆大神朋友潮棒der 當你有一堆大神朋友，自己看起來也像大神了 有些很酷的想法或很ㄎㄧㄤ的作為 奇怪ㄉ帽子 現場酒品 神奇的吊牌 對於參與研討會的心態也跟台灣不ㄧ太一樣 問問題很多 歡迎討論","link":"/2018/05/25/Black-Hat-Asia-%E5%B9%B4%E6%9C%83%E5%8F%83%E8%88%87%E5%BF%83%E5%BE%97-By-Adr/"},{"title":"CNN-實作練習","text":"CNN 神經網路實作tags: AI Junior Talk 人工智慧青年論壇 機器學習 比賽介紹 imagenet 神經網路介紹AlexNet 網路 成功率提高至 83.6% 至此開始發展電腦視覺 使用 ReLU LRN層（後來被淘汰，例如 BN） overlapping pooling Dropout VGG16 優點 相對淺 構造簡單 易入門 缺點 權重多 肥(吃較多記憶體) VGG16 paper Google Net 當年已經勝過 Google Net 較為複雜 由 Inception 組成 神經網路具有分支 避免深層網路過多過長時，早期權重無法被修正 可以直接以分支的 softmax 去反向傳播修正權重 ResNet 同 VGG16 構造較為簡單 但是較深，所以新增捷徑 透過捷徑反向傳播修正前面權重 曾樹效果是有上限的 優點：參數少 缺點：使用者容易設定過多層 預訓練權重應用資料集來源課程架構","link":"/2018/11/13/CNN-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92/"},{"title":"GCPUG Taipei 2019","text":"GCPUG Taipei1/9 (三) Google Taipei 101 Office 77F Airflow to Cloud Composer by Bruce Kuo / Data Scientist @ Codementor 當電子發票遇見 Google Cloud Function / Cage Chung 介紹文章https://leemeng.tw/a-story-about-airflow-and-data-engineering-using-how-to-use-python-to-catch-up-with-latest-comics-as-an-example.html 當電子發票遇到 google cloud function 電子發鰾 google cloud function eionvio(?) demo tip 電子發票規格cloud functioncloud server &lt;-&gt; cloud functions &lt;-invoke-&gt; other APIs Triggers - Http--trigger-http Triggers - Bucket--trigger-bucket= Triggers - Topic--trigger-Topic= Triggers - Event","link":"/2019/01/09/GCPUG-Taipei-2019/"},{"title":"HITCON FreeTalk 2018 暢談 CPU 處理器的歷史包袱","text":"HITCON FreeTalk 2018 暢談 CPU 處理器的歷史包袱 共同筆記 主辦單位:社團法人台灣駭客協會(HITCON)時間: 2018/01/19(五) 13:20 - 17:00報名網址: https://hitcon.kktix.cc/events/hitconfreetalk20180119直播網址: https://www.facebook.com/HITCON/ 123456789議程表:12：50 - 13：20 報到13：20 - 13：30 開場13：30 - 14：00 Spectre &amp; Meltdown 漏洞原理說明與 POC 剖析（講師：Bletchley）14：00 - 14：30 從晶片設計角度看硬體安全（講師：中原大學 黃世旭教授）14：30 - 15：00 下午茶交流15：00 - 15：30 Spectre &amp; Meltdown 漏洞的修補策略與 risk mitigation（講師：gasgas）15：30 - 16：00 詭譎多變威脅下的資安應變與治理（講師：林宏嘉協理）16：00 - 17：00 Panel Discussion 歡迎大家針對這次的議題作共筆！ 一、Spectre &amp; Meltdown 漏洞原理說明與 POC 剖析 (講師: Bletchley) Overview of Meltdown and Spectre Threat: adversary who can execute low privilege code can read unpermitted memory region Impact: Meltdown: Most Intel Processors Spectre: Intel, AMD, ARM processors Reason: INconsistent between processor architecture and microarchitecture(cache) Lack of permission checking when CPU optimization Website: meltdownattack.com Execute low privilege code can read unpermitted memory region Google 研究團隊發布漏洞的網站 - https://meltdownattack.com CPU Architecture 中，frontend 是作 fetch and decode 的部分，接著才交給 backend 去做 execution，其中 code (record) buffer 也在這邊 out-of-order execution有時候處理器為了加速，會偷跑排在後面的指令，例如後面指令可能是一個加法指令，而且已經在 register 中，就可能會被選為偷跑項目 但有時候偷跑會發生出錯，一旦出錯，有可能被處理器丟棄，不會 commit 到 CPU 的輸出結果中(memory write) speculative execution這個是 branch instruction 的一種執行方法，會去猜測 condition instrcution 的成立與否，如果猜對了，就會 commit 到 CPU 的 memory 偷跑動作的時候，會去存取記憶體，subsytem cache 不知道是偷跑的，所以還是會把獨進來的資料做處理，這就是漏洞 Flush + Reload Attack1var = array[ secret* cache_line_size ] 256 accesses time helps discover one byte data () CVEs CVE-2017-5753 CVE-2017-5715 CVE-2017-5754 Inside the CPU Frontend Execution Engine Reorder Buffer 重排序缓冲区 Execution Unit CPU執行單位 漏洞的緣由 CPU 偷跑後面順序可以先執行的指令 若發現偷跑的指令不合 不commit偷跑資料回cpu 但Cpu cache 仍留存資料 可是於memory與cpu中無法觀察之 可利用預執行cache資料 attack-meltdown Attack想法 設一array 若讀取過的array[x]會存於cache cache資料的讀取時間&lt;memory讀取時間 統計時間即可洩漏曾讀取過的值 256 accesse can discover a Byte. Meldown Attack Steps Cpu預先執行超出權限的資料 即使資料永遠不會被程式讀取 仍然有機會預先儲存於cache中 attack-spectre Attack想法 No cache:array1_size,array212if (x&lt;array1_size ) y = array2[array1[x]*256]; if後執行較慢 連續數執行後 Cpu預先執行第二行 帶入不進入的if x 會預先執行而得到y值存於cache spectre Attack Steps 文獻連結Meltdown Proof-of-ConceptSpectre POCmain differences between Meltdown and Spectre 筆者按 Branch predCiition兩種變形 out-of-order execution = 預測下一個要執行的程序並預處理 speculative execution = 在分支時預測下個要執行的分之進行預處理 討論 array = [ secret * cache_line_size]read all array and count how many element loaded to cache = secret value看不出來這兩個漏洞的差異啊，好像都是同一個方法 [name=CK] 雖然漏洞被區分為兩種，他們概念都以out-of-order execution為核心。可以把Spectre看成Meltdown的擴充，比較大的差異是Spectre加入branch prediction做攻擊。 [name=Ethen] 之前我看到Meltdown的特點不只是讀取數據，還可以打破隔離(寫入)，沒介紹到…如果按照上面的比較表兩邊都是僅讀取，只是讀取範圍不一樣（kernel space v.s. user space any process），那為什麼Maltdown可以直接傷到虛擬化環境？ring -1不是單純讀取kernel就可以跳進去的啊 [name=Austin]Guset攻擊Host的部份是屬於Spectre-Variant2的範疇，它其實是利用從Guest program去推敲kvm.ko, vmlinux的記憶體位置，在將資料流至user space。雖然Guset跟Host看起來是分離的，其實有很多共用的特性，可以這樣去推敲記憶體位置 [name=Austin]我的理解沒錯的話，Spectre跟Meltdown的差異在於後者使用了Out of order execution，兩者都有使用speculative execution(branch prediction)，另外講者沒有提到的是到底如何取得secret的資料，根據POC code給的char secret = “The Magic Words are Squeamish Ossifrage.”;malicious_x = (size_t)( secret - (char) array1 );當我們推敲出array = [ array1[x] * cache_line_size] 裡面array1[x]的值後，其實就可以推導secret的內容：array1[x] = addrress of array1 + offset x = addrress of array1 + address of secret - address of array1 = address of secret = ‘T‘ [name=Ethen] 站在攻擊者的立場，Meltdown對我來說會是一個不錯的攻擊輔助資訊，我可以拿到核心記憶體中的帳號密碼或知道有開啟什麼服務輔助我攻擊，但這僅限於當下的作業系統，如果能夠寫入或直接提權那會好用的多單純推敲kvm.ko能做的事情有限，如果hypervisor沒有放出可攻擊的服務或權限，我會很難往上打，頂多去讀其他虛擬機器試圖利用其他虛擬機上的服務弱點去一台一台打，這樣就沒那麼好用了 二、從晶片設計角度看硬體安全（講師：中原大學 黃世旭教授）邏輯化簡漏洞 進行邏輯化簡時 Don’t care的部分可能會產生非預期的值 或Dont’ care的輸入會輸出=預期的答案 out of order executed將無前後關係的排成同時運作降低使用運算時間 branch executed 可以與cache無關：透過時間差取得之前的key meltdown &amp; spectre 探討* 同上 設計硬體安全的困難 結語 其他大大的筆記現代CPU設計由於Multithread &amp; Multicore的因素CPU執行指令運算之前需要peak一下CPU的狀態與看預算時需求的Memory是否會產生lock，這個過程會在CPU的底層做(注意到這裡OS已無法管理，指令並須被執行除非CPU drop這個指令，CPU drop會通知回OS) 利用這個方法去看CPU Handle的記憶體區段Peak其他區域的記憶體位置(OS無法阻擋)，或者CPU上的Memory管理機制重新回Initial state 在邏輯電路裡設計狀態機(FSM)時傳統訓練方法有don’t care condition可能會造成電路運行時產生你所不期望的狀態循環，例如重回initial state，所以設計時不太應該使用don’t care(雖然可以節省電路成本與最邏輯複雜度最佳化)，但為了安全性，應當把所有組合列出，額外去處理不期望的例外。 PUF -&gt; physical unclonable functionSome basic description about PUF 電路最佳化問題 - 電路複雜度 - 電路成本 - Data Store(Cache &amp; Register )漏電問題 - 面積 Intel identified the vulnerabilities as: CVE-2017-5705 – Multiple buffer overflows in kernel in Intel ME Firmware allowing an attacker with local access to the system to execute arbitrary code. CVE-2017-5708 – Multiple privilege escalations in kernel in Intel ME Firmware allowing unauthorized processes to access privileged content via unspecified vector. CVE-2017-5711 &amp; CVE-2017-5712 – Multiple buffer overflows in Active Management Technology (AMT) in ME Firmware allowing attacker with local access to the system to execute arbitrary code with AMT execution privilege. CVE-2017-5706 – Multiple buffer overflows in kernel in Intel SPS Firmware 4.0 allow attacker with local access to the system to execute arbitrary code. CVE-2017-5709 -Multiple privilege escalations in kernel in Intel SPS Firmware 4.0 allows unauthorized process to access privileged content via unspecified vector. CVE-2017-5707 – Multiple buffer overflows in kernel in Intel TXE Firmware 3.0 allow attacker with local access to the system to execute arbitrary code. CVE-2017-5710 – Multiple privilege escalations in kernel in Intel TXE Firmware 3.0 allows unauthorized process to access privileged content via unspecified vector. 原文:https://meltdownattack.com/meltdown.pdf 三、Spectre &amp; Meltdown 漏洞的修補策略與 risk mitigation（講師：gasgas）前言 你認為得資訊安全？ 降低風險，而不可能100%修補 Risk = Vulnerable X Threat X Asset 風險 ＝ 資安漏洞 Ｘ 駭客進不進得來 Ｘ 資產價值 該怎麼做？ 漏洞因應流程： 資訊盤點 ➡️ 漏動檢查 ➡️ 測試機測試 ➡️系統備份 ➡️ DRP演練 ➡️ 進行修補 ➡️ 持續觀察 漏洞檢查： Unix：GitHub大大提供 Windows：微軟大大提供新的PowerShell你可以檢查是 否已更新 Mac：Apple官網提供 瀏覽器運行：javascript等程式 https://xlab.tencent.com/special/spectre/spectre_check.html 漏洞修補： CPU Level修補：Firmware Update 程式千萬別看錯執行錯，變磚機率爆高！ 目前還不是 CPU Microcode 修補的好時機，可能都只是暫時修補，後續的修補應該會比較全面也比較安全。 Bios Level修補：notebook機器為主的修補方式 修補會是個比較好的選擇 (其中也包含 CPU Microcode)，變磚機率低一點點。 [name=Wisely] BIOS Update 目前只能修補其中一個 Spectre 的弱點 Amazon (AWS)/(VMware) 已修補完畢 OS Level修補：見官網 Application Level修補： 程式重新編譯* 未重新 comliler 的程式還是有機會有風險 Google Retpoline：GCC，LLVM版本 徹底分支 Visual Studio 2017 version 15.5 /Qsperctre lfence ：系統執行到此會停止預先運算 安全最大風險Brower： 使用javascript打包poc放在網路上,瀏覽器看了,記憶體的資料就被偷了提醒 修補一定要從官方下載 前漏洞衍伸 ➡️ skyfall and solace：不好修 討論 [name=Ethen] 不對啊，目前的弱點需要讀取變數/建立陣列/評估cache速度，這些在JS / Java翻譯成實際執行在CPU上的native code不太可能還包在同一個分支中，他是怎麼有辦法說這樣是可以攻擊的？有成功案例嗎？ [name=Austin]如果JS注入的code(browser-&gt;OS-&gt;CPU)是在同一個process或可控制的process就可以互相做存取，簡單的範例影片在這：https://www.youtube.com/watch?v=RbHbFkh6eeE [name=Ethen] 這個影片看起來是在本機端執行原生程式，來撈取另一個程式的記憶體內容，好像不是JS / Java?即便都在同一顆CPU上，但直譯語言被翻過去到CPU上應該會有多不少東西，如Java有GC的動作，也沒有指標可直接讀取，這些東西混進去會導致執行不是連貫的或不是同一個分支，影響分析結果[name=gasgas] 是..這樣的測試會有很多干擾, 也會大大地影響到結果. 所以只能參考用. 這個javascript POC 目前爭議還很大..XDDD .. 四、詭譎多變威脅下的資安應變與治理（講師：林宏嘉協理）概念 &amp; 觀念 對應新的威脅與正確的認知 can’t stop all attack Human Experience and Behaviors Detect in mobileDefence in deep Attacker Decision Cycle: Observe Orient Decide Act 加速決策 &amp; 擺脫困境 Maximize Visibility(最大化可視性 internal external reduce manual step(and error) 減少手動步驟（錯誤） Maximize human impact 善用人力資源 使用者影響 受影響的CPU skylake後影響微小 skylake前依照軟體有不同影響 簡報節錄 Panel 問題（歡迎大家先來填寫）1.面對 zero day attack，如何偵查與預防2.arm64 為何也會有同樣的問題~目前的解法是什麼??3.今年剛舉辦的 CES 2018 上所展示的最新型筆電，同樣也使用 Intel 第八代 CPU，是否有受此次漏洞影響？畢竟很多人會猶豫是否要再等待下一代的 CPU 再購買，謝謝。 gasgas回答: 8th Gen Intel CPU 一樣有這三個漏洞, 一樣需要修補, 請參考https://hothardware.com/news/intel-8th-gen-core-cpus-10-slowdown-javascript-spectre-meltdown-patches 第八代正在賣，第九代再測試，第十代正在做，可能等到第十一代才沒有 4.依據 ITHOME 的訊息(https://www.ithome.com.tw/news/120312)， 目前透過OS更新的方式為針對 meltdown 的弱點修補，請問關於 Spectre 漏洞是否有 OS 或是 firmware 的修補連結嗎?5.問題一：目前全世界尚無發生災情，如果BIOS更新會拖慢電腦效能，那公司內部先發佈KB4056892更新檔的有效阻擋程度。 問題二：台灣國內有哪些資安網站可即時發佈及提供解決方案。6.如何能更有效率的檢查並修補該漏洞7.如何進行CPU攻擊8.對於晶片出包的問題，未來是否有更好的因應方式？如果來不及修補該如何自保？9.想請問針對Meltdown &amp; Spectre 漏洞，對於一般做為系統、網站伺服器之主機有何影響，如果不更新作業系統只單靠防火牆進行過濾控管(EX:限定某幾個ip可以連線)可以避免被駭客入侵嗎?10.為什麼對一般使用者電腦影響較低，對雲端業者卻衝擊很大? 作業系統修補，成效如何?會對微軟的效能有重大影響嗎？ 雲端的衝擊有何應對之道?11.這次Meltdown和Spectre更新檔有其必要更新嗎?看一些報導上說更新後的問題還比較多。12.除了CPU外，其它的GPU或TPU等，是否應該也會如此呢？該如何因應處理？13.針對微軟官方說明網頁:https://support.microsoft.com/en-us/help/4072698/windows-server-guidance-to-protect-against-the-speculative-execution 請問其中的 To enable the fix 部分所提到的機碼是否為安裝了微軟的 Patch，且新增這三個機碼就可修補 CVE-2017-5715、CVE-2017-5753和CVE-2017-5754 三個漏洞嗎?還是除了進行以上步驟後，仍需更新Server硬體製造商給的 BIOS 才能阻擋攻擊呢?(微軟官方建議還是要更新硬體BIOS才能完整修補漏洞，但如果只上OS Patch 就能有效防禦的話，是否就可以不用急著更新BIOS了)14.如果在虛擬主機上，Host端打上了Patch，但是Guest端沒有打上，這樣在Guest端能引發攻擊嗎？15.Variant2 Branch target injection, hacker是如何對Branch history buffer進行訓練以及達到修改目的地位置，使得它會進行推測執行然後執行到hacker的gadget? 跟ROP(Return oriented programming)的攻擊方式是一樣的嗎？16.對於因CPU漏洞修補而造成其他系統運作的問題時，在整個產業生態系統方面是否有更好的解決方式，以避免MIS人員害怕系統出問題而不願意修補漏洞?17.如何評估修補前與修補後的效能差異?網路上有人說差異不大，也有人說差異滿多的，是否有較客觀的評估方法?18.CPU層級的弱點需要靠明確的指令碼來利用，我的理解是只有在Native code已經可以執行的情況下可以藉此竊取資料或提權，不過可以看到各大瀏覽器在第一時間就做了修補。想請問是否代表這個弱點可以在不使用native code的情況下利用？","link":"/2018/01/19/HITCON-FreeTalk-2018-%E6%9A%A2%E8%AB%87-CPU-%E8%99%95%E7%90%86%E5%99%A8%E7%9A%84%E6%AD%B7%E5%8F%B2%E5%8C%85%E8%A2%B1/"},{"title":"Microsoft Blockchain 合作案例","text":"區塊鏈實作：在成功得案例上做出您的第一個應用WiFi access:msevent998dl Azure Blockchain-as-a-service(Demo)-30minsMichael Chi 軟體開發工程師 作者GitHub:https://github.com/michael-chi/blockchain-learning Before we start What is … Blockchain distributed ledger smart contract Plus have programming knowledge Azure Knowledge 純技術 Workshop 區塊鏈解決方案中遇到問題如何解決，以解決的思路 Blockchain Case： 東南亞航空公司 農業產銷的公司，類似台糖的農產品版本 農業產銷的公司 有數個 farmer 管理者，用以確認 農人、農地大小、產品品質 農民有數種、法律有數種、農地有數種，希望解決繁瑣的問題 解決方式 IPFS 行星檔案系統：類似區塊鏈 p2p 的分散式檔案系統 將農民資訊 ID 放到 smart contract 上，而藉由 hash ID ，將個人資料儲存於資料庫，不上鏈 農地資料同上，ID 上鏈，其餘放到 IPFS 上 東南亞港口管理的機構 港口想要建造一艘新的船隻，非常麻煩，可能需要 3060 張的憑證，需要 36 個月，而其中多數憑證需要人工申請，非常耗時耗人力。 解決方式 一家船隻的擁有者，造船時，創建一個 smart contract 放到區塊鏈上，每張 smart contract 都代表一個憑證，取得憑證後，交給監管驗證，核發後建造。 Baseline 參與者多 資料共享者多 憑證可以透過區塊鏈在多個機構中流通 參與者越多，越適合用區塊鏈來解決問題 How we work with the customer 3 週聯絡交流 2 週前往顧客公司討論 2 月 coding 航空公司 希望多家航空公司的里程數（紅利）可以共用，多個參與者可以擁有共通的交流平台。 擁有一個共通的貨幣，用以交換產品或價值 一個開放的平台，任何人只要他想，就可以來參與這個平台 這個平台必須夠安全 必須是全球性的 輕易的加入這個聯盟 解決方式 我們認為區塊鏈是好的解決方案、一個安全的方式，資料在其中是分享的，且是一個分散式的系統，資料就會在節點之中去 Ledger。How do we 創建一個 Token 、 ETH 、 Hyperledger？ 外幣交換的機制？ Track Transaction？ 如何與現有的會員系統做整合？ interact with other participates？ 如何建立一個全球可信賴的系統？ 多國間的資料如何同步？ 如何管理？ 思考方向 先解決簡單的問題 設計一個給單一客戶的架構 延伸至其他公司 業務場景 創建一個貨幣，將各個公司的會員點數擁有一個共通的轉換媒介 所有透過這個貨幣的交易都必須被完整的記錄下來 所以的夥伴必須被管理，必須是某個航空公司的會員才能轉換 區塊鏈角度 所有的客戶、智能合約都是一個 address 。 需要數個 contract Token contract Exchange Rate Contract Transaction Contract 記錄一些特殊的交易邏輯 We decide to 微軟在 eth 有各種合作，又 因為有 80% 的 Token 都是 ERC 20 所以採取 ERC20 smart from eth uses ERC 20 Standard Function total supply balanceOf Transfar transferFrom Approve allowance Events Transfer Approval openzepplin：一個針對安全性做增強的 Token 範本 Create Digital Token==等補簡報中的 3 個 smart contract 的 Function== Transaction Token Echange Rate Questions Now we have smart contracts ready Q:如果邏輯需要更改時該如何是好？ 如何 update ？ A:Proxy Pattern 將邏輯與資料分開 透過更改 Proxy contract ，判斷應該呼叫哪個版本 Q:如何使 API、操作 smart contract ，使之呈現於終端裝置上？ A:需要一個 Library API Authentication In smart contract Function Modifier In API Truffle.js 部署 Smart Contracts 並測試 WEB3.JS Challenge Q:如何管理雲端的 eth 與離線的 Database A:在 Azure 上 Function App Web App/API app Vitual Machines 兩種解決方式 oracle 小結 呼叫己身 API 管理自己的會員 以 VPN 等等網路傳到區塊鏈上同步 需要報表時，從 Databasr 查詢 需要驗證時，從 Blockchain 查詢 未來的問題 區塊鏈、SQL 哪邊是主體 是否能夠讓網路互連 普通的 CI/CD 可以使用 Azure 內建的 CI/CD Smart Contract CI/CD 當你部署一個新的版本後，對區塊鏈來說就是一個全新的事情，而究竟要不要自動使用 CI/CD 尚未有定論。 What’s Next 我們不希望每一個 case 都從頭開始 我們希望能夠有個 base ，之後的開發都由此延伸 我們有一個解決方案在 Azure 上，只要將它組合起來 Before Starthttps://www.microsoftazurepass.com/SubmitPromoCodehttps://onedrive.live.com/?authkey=%21AHCMYjJIaYWpXF0&amp;id=E0579E51F1904020%21363386&amp;cid=E0579E51F1904020 快速的建立區塊鏈並運用運用 Azure 上的 template 從 60% ~ 70% 開始建立區塊鏈之後會把代碼開源出來到 GitHub （大驚！！ For 聯盟鏈","link":"/2018/01/17/Microsoft-Blockchain-%E5%90%88%E4%BD%9C%E6%A1%88%E4%BE%8B/"},{"title":"SITCON 夏令營 2017 chatbot 共筆","text":"一小隊 2017 SITCON 夏令營 bot 共筆bot目的：處理日常金融用途1@book_keeping_bot 日常記帳 收/支出、時間、內容、金額、總金額 * 記錄前次內容提供清空 * 將記帳紀錄固定於單一訊息 指令: /list:將目前表格秀出 讓用戶可選擇要編輯的訊息 輸入順序:收入(+)/支出(-) 項目 金額 直接設定成表格填空 從使用者API中提取時間 /start 開始說明 book-keeping, [19.01.18 13:10]OK， William你準備好了…… 讓我們開始記帳吧 book-keeping, [19.01.18 13:10]記帳請依序輸入 /add +/- book-keeping, [19.01.18 13:10]請輸入/list查看帳本，輸入/total 獲取總資產 book-keeping, [19.01.18 13:10]借款請依序輸入 /lend &lt;@username&gt; book-keeping, [19.01.18 13:10]查看借貸請輸入 /ldict &lt;@username&gt; user借還錢 借貸時間、內容、金額、備註 * 利用＠表示被借錢者 * 借還錢時與＠確認借據正確性 指令:將目前欠款人統一成一張清單 指令:查詢目前欠款紀錄 指令:查詢歷史借款人(username/借款次數、金額 借貸實際測試範例 William Mou, [19.01.18 13:10]/lend @WilliamMou 100 book-keeping, [19.01.18 13:10]借款給 @WilliamMou 100元 book-keeping, [19.01.18 13:10]請借款人 @WilliamMou 回傳 /borrow @WilliamMou 1516338639 驗證 William Mou, [19.01.18 13:10]/borrow @WilliamMou 1516338639 book-keeping, [19.01.18 13:10]提醒：輸入 /payback @WilliamMou 1516338639 還款 William Mou, [19.01.18 13:11]/ldict @WilliamMou book-keeping, [19.01.18 13:11]欠款確認，欠100元 Bot架構 array: 0: id: time: type: proj: money: total: ... 相關botbot: @RawDataBot 相關網站bot&amp;python3telegpot說明文件python telegram定義git版本控制 技術問題 telegram如何輸出適合螢幕大小的記帳表格 ```python= -- coding: utf8 --import telepotfrom telepot.loop import MessageLoopfrom telepot.namedtuple import ( ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton)from random import choiceimport jsonimport time TOKEN = ‘’ bot = telepot.Bot(TOKEN)telBot=telepot.Bot (TOKEN)Bot_inf=telBot.getMe() #資料結構：{chatid:[[+-,money,event],[+-,money,even],[+-,money,even]]}moneydict={}#資料傑{idtousername:{data:[1,]}} 0:未確認 1：確認 2：還款確認 pop:還款完成lenddict={} def print_msg(msg): print(json.dumps(msg, indent=10)) def on_chat(msg): print_msg(msg) print(“~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~”) header = telepot.glance(msg, flavor=”chat”,long =True) data=”” if header[0] == “text”: text = msg[“text”] # command if text.startswith(“/“): command = text.lstrip(“/“) if command == &quot;start&quot;: text = &quot;OK， {}\\n你準備好了...... 讓我們開始記帳吧&quot; bot.sendMessage(header[2], text.format(msg[&quot;from&quot;][&quot;first_name&quot;])) bot.sendMessage(header[2], &quot;記帳請依序輸入 /add +/- &lt;money&gt; &lt;porj&gt;&quot;) bot.sendMessage(header[2], &quot;請輸入/list查看帳本，輸入/total 獲取總資產&quot;) bot.sendMessage(header[2], &quot;借款請依序輸入 /lend &lt;@username&gt; &lt;money&gt; &lt;porj&gt;&quot;) bot.sendMessage(header[2], &quot;查看借貸請輸入 /ldict &lt;@username&gt;&quot;) elif command[:3] == &quot;add&quot;: #data=[+-,money,event] data=command[3:].split() if data[0] == '+' or data[0]=='-': try: int(data[1]) bot.sendMessage(header[2],&quot;增加收支細項&quot;+str(data[2])) if header[2] in moneydict: moneydict[header[2]].append(data) else: moneydict[header[2]]=[data] bot.sendMessage(header[2],&quot;收支帳本&quot;+str(moneydict[header[2]])) except: bot.sendMessage(header[2],&quot;請符合格式ouo&quot;) else: bot.sendMessage(header[2],&quot;請符合格式ouo&quot;) elif command[:4] == &quot;lend&quot;: data=command[4:].split() bot.sendMessage(header[2],&quot;借款給 &quot;+str(data[0])+&quot; &quot;+str(data[1])+&quot;元&quot;) if msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+str(data[0][1:]) in lenddict: lenddict[str(msg[&quot;from&quot;][&quot;username&quot;])+&quot;to&quot;+str(data[0][1:])][msg[&quot;date&quot;]]=[0,str(data[1])] else: lenddict[str(msg[&quot;from&quot;][&quot;username&quot;])+&quot;to&quot;+str(data[0][1:])]={msg[&quot;date&quot;]:[0,str(data[1])]} bot.sendMessage(header[2],&quot;請借款人 &quot;+str(data[0])+&quot; 回傳 /borrow @&quot;+str(msg[&quot;from&quot;][&quot;username&quot;])+&quot; &quot;+str(msg[&quot;date&quot;])+&quot; 驗證&quot;) #bot.sendMessage(header[2],str(lenddict)) ''' if str(msg[&quot;from&quot;][&quot;username&quot;])+&quot;to&quot;+str(data[0]) in lenddict: lenddict[str(msg[&quot;from&quot;][&quot;username&quot;])+&quot;to&quot;+str(data[0])]={msg[data]:0} bot.sendMessage(header[2],0) else: lenddict[str(msg[&quot;from&quot;][&quot;username&quot;])+&quot;to&quot;+str(data[0])]={msg[data]:0} ''' #commond: /borrow @username date elif command[:6] == &quot;borrow&quot;: data=command[6:].split() lenddict[data[0][1:]+&quot;to&quot;+msg[&quot;from&quot;][&quot;username&quot;]][int(data[1])][0]=1 #bot.sendMessage(header[2],str(lenddict)) bot.sendMessage(header[2],&quot;提醒：輸入 /payback &quot; + data[0] + &quot; &quot; +data[1]+&quot; 還款&quot;) #commond: /payback @username date elif command[:7] == &quot;payback&quot;: data=command[7:].split() lenddict[data[0][1:]+&quot;to&quot;+msg[&quot;from&quot;][&quot;username&quot;]][int(data[1])][0]=2 bot.sendMessage(header[2],&quot;請 &quot;+data[0]+&quot; 確認 @&quot;+str(msg[&quot;from&quot;][&quot;username&quot;])+&quot; 是否還款，並輸入 /payok @&quot;+msg[&quot;from&quot;][&quot;username&quot;]+&quot; &quot;+str(data[1])+&quot; 確認&quot;) #commond: /payok @username date elif command[:5] == &quot;payok&quot;: data=command[5:].split() lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]].pop(int(data[1])) bot.sendMessage(header[2],&quot;還款確認完成&gt;&lt;資料已核銷&quot;) elif command == &quot;list&quot;: for i in range(len(moneydict[header[2]])): bot.sendMessage(header[2],&quot;收支帳本&quot;+str(moneydict[header[2]][i])) # /ldict @username elif command[:5] == &quot;ldict&quot;: data=command[5:].split() if msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:] in lenddict: #for i in lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]]: for i in lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]]: if lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]][i][0]==0: bot.sendMessage(header[2],&quot; 欠款待確認，欠&quot;+str(lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]][i][1])+&quot;元&quot;) elif lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]][i][0]==1: bot.sendMessage(header[2],&quot; 欠款確認，欠&quot;+str(lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]][i][1])+&quot;元&quot;) elif lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]][i][0]==2: bot.sendMessage(header[2],&quot; 還款待確認，欠&quot;+str(lenddict[msg[&quot;from&quot;][&quot;username&quot;]+&quot;to&quot;+data[0][1:]][i][1])+&quot;元&quot;) else: bot.sendMessage(header[2],str(data[0])+&quot; 暫無欠您的款項&quot;) elif command[:5] == &quot;total&quot;: s=0 for i in range(len(moneydict[msg['chat']['id']])): if moneydict[msg['chat']['id']][i][0]=='+': try: s+=int(moneydict[msg['chat']['id']][i][1]) except: pass else: try: s-=int(moneydict[msg['chat']['id']][i][1]) except: pass bot.sendMessage(header[2],str(msg['chat']['id'])+&quot;總資產：&quot;+str(s)) elif command[:9] == &quot;del_list&quot;: del moneydict[msg['chat']['id']] bot.sendMessage(header[2],&quot;以清除您的儲蓄列表&quot;) # other msg #else: # 我覺得不行！ #image_url = &quot;https://cdn.pixabay.com/photo/2016/03/22/23/45/money-1273908_960_720.jpg&quot; #bot.sendPhoto(header[2], image_url) #bot.sendMessage(header[2],&quot;輸入/start查看指令&quot;) if &quot;@all&quot; in msg[&quot;text&quot;]: admins_list=[] admins_dict=telBot.getChatAdministrators (msg[&quot;chat&quot;][&quot;id&quot;]) chat_name=msg[&quot;chat&quot;][&quot;title&quot;].encode('utf8') print(admins_dict) for admin in admins_dict: if 'username' in admin['user']: admins_list.append('@'+str(admin['user'][&quot;username&quot;])+&quot; &quot;) else: user_id=admin[&quot;user&quot;][&quot;id&quot;] try : first_name=admin[&quot;user&quot;][&quot;first_name&quot;] except: pass try : last_name=admin[&quot;user&quot;][&quot;last_name&quot;] except: pass try: admins_list.append('@ '+first_name+&quot; &quot;+last_name) except: try: admins_list.append('@'+first_name) except: pass try: admins_list.append('@'+last_name) except: pass print(admins_list) send=&quot;&quot; for admin in admins_list: send+= admin + &quot; &quot; bot.sendMessage(header[2], send) print(admins_list) if &quot;@book_keeping_bot 閉嘴&quot; in msg[&quot;text&quot;] or &quot;shut up&quot; in msg[&quot;text&quot;]: bot.sendMessage(header[2], '@' + msg['from']['username'] + &quot; 對不起Q.Q&quot;) time.sleep(5) bot.sendMessage(header[2], '@' + msg['from']['username'] + &quot; 你以為我會這樣說ㄇ？&quot;) bot.sendMessage(header[2], '@' + msg['from']['username'] + &quot;\\n\\ ——————/´ ¯/) \\n—————–/—-/ \\n—————-/—-/ \\n———–/´¯/‘–’/´¯`·\\n———-/‘/–/—-/—–/¨¯\\n——–(‘(———- ¯~/‘–’)\\n———\\————-‘—–/\\n———-‘'————-·´\\n————\\———–(\\n————-\\———– “) elif &quot;@book_keeping_bot&quot; in msg[&quot;text&quot;]: bot.sendMessage(header[2], '@' + msg['from']['username'] + &quot; 我可是很忙得&quot;) image_url =&quot;https://www.moedict.tw/%E5%88%B7%E5%88%B7.png&quot; bot.sendMessage(header[2], '@' + msg['from']['username'] + &quot; 找我有啥事情？&quot;) bot.sendMessage(header[2],&quot;孤單寂寞覺得冷？&quot;) bot.sendMessage(header[2],&quot;簡單，我可以陪你刷起來！&quot;) for ii in range(3): bot.sendPhoto(header[2], image_url) MessageLoop(bot, { ‘chat’: on_chat, #’callback_query’: on_callback_query,}).run_as_thread() print(‘Listening …’)","link":"/2017/08/13/SITCON-%E5%A4%8F%E4%BB%A4%E7%87%9F-2017-chatbot-%E5%85%B1%E7%AD%86/"},{"title":"SITOCN 2018 議程筆記","text":"由淺入坑區塊鏈～從認識架構到應用智能合約！ - 牟展佑 簡報連結: 點我 開場影片 『發現芬特克！比特幣 &amp; 區塊鏈原理大解析』芬特克 FinTech EP1 講者資訊 松資活動/總務 學長推坑SITCON 偏好將資訊結合金融領域 願在成為工具人之前成長茁壯(? Part 0 銀行、中心化、比特幣到去中心化貨幣 以物易物&gt;金銀銅鐵錫&gt;法幣&gt;信用卡 法定貨幣缺點: 中心化 Part 1 區塊鏈架構數位簽章(電腦的帳本) 雜湊(hash)演算法SHA-256 交易事件加密(簽章) 加密 對稱加密: 相同鑰匙加密解密 非對稱加密: 分為私鑰和公鑰，私鑰加密公鑰解密 礦工收到: 紀錄 簽章 SHA-256(紀錄) &gt;雜湊1 用私鑰加密 加密雜湊 &gt;簽章 用公鑰解密 &gt;雜湊 SHA-256(紀錄) &gt; 雜湊2 驗證 雜湊1 == 雜湊2 去中心化 把元改成BTC(加密) 把需要根付換成支付(數位簽章) 確認支付量(無法查詢餘額故每筆交易都以過去的交易作為基礎) 交易雙方的名字改成帳號(避免重名) 轉帳紀錄存於各節點 一致性問題 避免紀錄竄改-&gt;區塊相連 紀錄同步-&gt;產生新區塊 避免重複使用-&gt;每筆交易會和前一個來源一起加密 如何實現 hash 區塊 &gt; hash值前72位為0 &gt; 挖到礦 CPU &gt; GPU &gt; 礦機 &gt; 一堆礦機(礦場) 獎勵機制 挖到得到 12.5BTC(2017) 交易手續費算力過剩 調整難度同時產生區塊? 保留最長的區塊 小結* 利用SHA-256 &amp; 非對稱加密製作數字簽名* 利用區塊練儲存交易紀錄* 設置外的工作控制單位時間生產數* 將一定數量比特幣發給礦工，促進成長* 轉帳不依賴任何銀行或政府機構* 比特幣網路內總量不超過2100萬個比特幣 交易方式 場外交易:信任的人 場內交易:交易所(bitoex、maicoin） Part 2 從比特幣到以太坊 把數字改成文字Etherenum 智能合約 快速驗證(1min以下) 有錢就可做到無窮迴圈(有錢就是任性?) 目前無專用礦機 智能合約 Browser- Geth:讓我們能夠執行合約..等 Mist:錢包 智能合約的應用 ex:勞基法 老闆有智能合約 -&gt;加班的錢放入智能合約-&gt;判斷要給錢給員工(員工加班)還是退還老闆(員工放假) Part 3 區塊練3.0","link":"/2018/03/10/SITOCN-2018-%E8%AD%B0%E7%A8%8B%E7%AD%86%E8%A8%98/"},{"title":"Taiwan Cyber Security Summit 2018 台灣資安大會","text":"IP cam 資安標準制定與推動的經歷背景 物聯網的資安威脅 HP研究：七成物聯網有被駭風險 經家中螢幕跳出FBI付款通通知 資安產業對ICT產業的衝擊 路由器網路攝影安全性不足，友訊遭美國政府告上法院 華碩路由器被美國稽核20年，看如何確保物聯網安全 旗下產品為DDoS打手，中國豪邁召回產品 計畫介紹 政府委任資策會通動此計劃協助廠商提升資安，推動產業發展 IOT 資安提升推動方案 標準推動 ➡️ 制度建立 ➡️ 產業提升 標準推動：參照國際資安標準 制度建立：推動檢測紀錄 產業提升：輔導廠商提升資安品質 建立產業的資安要求，並期望能協助產業發展 影像監控系列與資安標準說明 資安標準發展與流程 資安發展該念： 產業需求搜集 ➡️ 選擇標準標的物 ➡️ 標的特性分析 ➡️ 標的物重要資產 ➡️ 資安威脅分析 ➡️ 資安標準需求 ➡️ 標準測試規範底稿 資安實務流程： 撰寫標準草稿 ➡️ 編列代表 ➡️ 專家會議 ➡️ 公開招標 標準框架： 資安標準與分級（一） 針對 IP CAM 的 5大安全構面訂定20大分項安全要求，並依照「一班消費」、「商用」與「關鍵任務」等應用領域訂定產品資安分級。適用不同廠商定位與使用者需求。 資訊安全 系統安全 通訊安全 身份識別與授權安全 隱私保護 不合規問題案例 實測常見不合規項目 為用防拆螺絲可輕鬆破壞外殼 XSS injection弱點 預設未加密 明碼傳輸 認證制度架構： 透過第三方檢測 產品認證時程推動 結語 資訊安全檢測不能達到 100%的安全，但可建立產品的資安基準，讓廠商與使用者有所依循 資安的提昇要資建立資安意識，不以通過檢測為目的，而是隨時注意資訊安全提升廠商資安能力。 Response Before Incident：制敵機先！主動式資安事件處理 系統、surver 無法通通保持最新 網站安全 選擇套件的同時，你就要承擔它存在的風險 系統安全 thrusted zoneCPU重新隔一塊，儲存私密資訊 建立好的防守比攻擊更困難 New trend of user identity from cloud giants todayIn the past user Facebook:2.12B Google:2B Apple iCloud:782M Microsoft Offive 365:120M How to identify who is who? IP Passwords problem of ID/Passwords 強制修改、後與前不重複一但密碼常換 過多 易忘 換密碼麻煩，不方便一但密碼不換 釣魚 Data breach is worst than what we can inagine 2015 - 2017 資料外洩 &gt; 4.2B 90% Data breach is from ID/Password phishingdata source : Risk Based Security==could security ： ID/Password 儼然成為最薄弱的防線== What Next? No Password 指紋驗證 綠色的銀行近月上市 2nd Factor Authentication 驗證碼 雙證件 Options of passeordless &amp; 2-step login Microsoft Widows:Hello login (No Password ) Azure：MFA(2nd factor authentication) Google OTP-SMS and Google Authenticator FIDO U2F key Phone login Facebook OTP - SMS, Facebook Authenticator, Google Authenticator, etc. FIDO U2F Key Apple MacOS:Apple watch or third party phone login (No Password) SMS OTP Email OTP SMS OTP Problem for SMS and one-time password 2-step login Not user friendly for everyone Third party APP is complicatrd to setup SMS isn’t security, it could be Interception. Bitcoin Wallet was hached Video New trend todat &amp; tomorrow Windows Hello Passworldless login FIDO - base hardware security key for 2nd factor Authentication Windows - USB &amp; NFC &amp; BLE MAcOS - USB &amp; BLE Android BLE &amp; NFC IOS -BLE Advantage to use FIDO-based produt google, facebook, Lenovo, Paypal, Gotrust, etc. All member Open standard 手機硬體中做互聯互通END 網路自動化機器人辨識與防護 自動化程式類別 暴力密碼猜測 以限速避免 網路蜘蛛-起始URL去爬每個子link 檢視hyperlink 檢視cookie 自動生成白名單 網路爬蟲-搜集廠商數據➡️對營運造成影響 透過檢視user-Agent 快速進行爬蟲模式效果管理 自動化網頁機器人 檢測應用程式行為，搭配rat limit、使用者輸入辨識等，進行防護 暴力密碼的測試 下載對應檔案內容：https://drive.google.com/drive/folders/1dODxIpFLRyuMhsGPEm6j-HqMn2JnwTSH 開啟Burp Suite Community Edition 使用方式 設定Burp Suite 攔截 Proxy：127.0.0.1:8080 設定Firefox 路經 Proxy：127.0.0.1:8080 開啟intercept 攔截request 內容 用正確帳號密碼登入後，得到正確的Respone內容 點選action -&gt; send to intruder add $ 參數 $ 更改成 暴力破解 cluster bomb payload引入參數集 option更改比對內容為正確的Respone內容 勾選掉Exclude HTTP headers Start attack 網路蜘蛛的測試 開啟websphinx.jar 可直接網路蜘蛛 (含 graph) 網路爬蟲 Mcafee 多維度與人工智慧進階威脅分析 快速過濾 特徵碼 信譽 模擬 動態分析 沙箱觀察 沙箱迴避 靜態程式碼分析 消除混淆碼 反組譯並揭露執行碼 比對同類家族 人工智慧分析 多維度的分析病毒代碼 自適應進階威脅聯防架構 收到包含可疑代碼之附件 送往surver確認 進入沙箱確診 即時傳回端點 於TIE比對過去存在的攻擊 SIEM儲存與管理IOC 人工智能安全管理解決方案最佳化威脅與合理的安全管理(ESM+UBA) AI與智能分析 即時進行分析 可執行的 整合式安全管理 政府案例分享 CASB-skyhigh 自動識別 個資 PCI Shadow Apps 控制 保護 DRM 加密 單一控制點-無摩擦部署 於雲端架設單一consol 不需於每台Device部署 建立Sky Link 透過API 可採去監控阻擋等訪滬措施 量子時代下的重裝駭客 何謂量子力學 描述圍觀物質（原子，亞原子粒子）行為的物理學理論 一種數學模型 一種描述物理世界的方法 一種模擬世界或人腦的方式 量子力學的歷史 薛丁格波動方程式 不確定性理論 波函數塌縮 迪拉克方程式 量子特性： 量子態疊加 經典比特 | 0 | 1 | 量子比特 |0&gt; |1&gt; 量子糾纏 何為量子電腦 是一種使用量子邏輯進行通用計算的裝置 物質分子和化學反應的模擬 快速解決一些傳統電腦需要長時間解決的問題 涼子特性 量子疊加 兩子糾纏 量子Gate Unitary 量子霸權 處理器要達到49量子為元 雙涼子為元錯誤率低於0.5% 屆時運算能力將會超越世界上所有電腦，具有解決傳統電鬧所解決不了問題的能力 台大開放式課程-量子力學 量子電腦哪裡找？ Quantum Gate 類型的 IBM有提供實驗性機器與API Microsoft VS + Q#,Python Rigetti python(Quil)+Quantum Visual Machine Quantum Annealing 類型的 D-Wave + quantum machine instruction(QMI) Quantum Gate Hadamard gate Controlll not Swap gate qiskit-sdk ( python3 )Try ‘local simulator’ 駭客如何用量子電腦做壞事 他可以做啥？ 植樹分解 對稱式演算法孤寂 量子金鑰傳輸 ( QKD ) 量子比特幣（qBitcoin） 量子數位簽章 :smile: Quantum machine learing Traveling Salesman Problem 質數分解 質數分解困難度為基礎ＧＧ short algorithm RSA 仰賴質因數分解的困難度 私鑰可以快速被算出 傳統RSA是 non quantum-safe 橢圓曲線密碼 對稱式演算法攻擊 Grover’s Search Algorithm 其實我 ( gasgas ) 從頭到尾只想用量子電腦挖比特幣:smile: proof-of-work可以算快一點 讓授權交易的橢圓曲線千張可以偽造/取代 晴天霹靂的 Hash function! Quantum Lower Bound for the Collision ProblemQuantan attack at Bitcoin, and how to protect against them 下兩篇By Jeffery Lin 金融數位化時代下的資訊風險與控制管理-為什麼需要煞車？風險管理用來控管快速成長-資訊風險管理：對資訊系統仰賴度提高、所處的環境越來越複雜（駭客、員工盜取資料、仍要符合政府法規）資訊風險管理協助管理重要資訊-新興科技：GDPR、Fintech，需要評估導入新興科技的風險，挑戰更勝過去-注意面向：安全性、可用性、效能（不彰導致使用者抱怨影響聲譽、可能會影響可用性）、法遵 -資訊風險管理( IT Risk Management) vs資訊安全管理( IT Security Management) 資訊風險管理( IT Risk Management)：找作業流程的風險、確保監控風險、Like 家教、協助組織通過稽核 資訊安全管理( IT Security Management)：確保資訊無外流、無沒權限人取得access -好處：降低資訊風險管理發生的機率和影響、有效跨部門溝通、協助風控化繁為簡-技巧：風險管理矩陣（要知道自己目標）、自行查核（找出問題）、風險註冊 FinTech – 金融科技的美麗與哀愁-演進：1991-Internet, 1995-ebay, 1998- paypal, 2007-iPhone, 2009-bitcoin, 2014-Apple Pay-最多 Fintech 用戶地區：中國、印度（發展快速、偽幣問題） 最多 Fimtech 使用年齡層：Y世代-台灣概況：行動支付、跨境支付、P2P借貸、機器人理財、虛擬貨幣-Apple Pay 代碼化（Tokenization）技術：商家、收單機構看不到卡號（減少偽卡） -信用卡側錄裝置(Card Skimmer Device)：不一定是店家所為QRCode 支付：偷換店家QRCode-行動銀行：惡意app（bankbot) 覆蓋在正常行動銀行app上，騙取帳密，還可攔截簡訊-SWIFT 系統金融犯罪（釣魚信件、水坑攻擊植入後門，再找SWIFT帳密進行攻擊）-區塊鏈-Smart Contract-資安風險：交易所、Smart Contract 漏洞、盜取 private key-金融電子化：駭客只要能控制資訊流，就能控制金流-控制好權限（雙重認證） 圖片後補 AI AI會取代我嗎？如果你問這個問題，代表你不了解AI，那未來就會被取代 資安現況 資安產業鏈： 資安產業中使用AI的三個層次 Malware識別惡意程式：識別黑名單機制 可以漏判 低錯誤率 Icident識別攻擊活動：人為書寫規則 Situation調查攻擊案情：找到駭客攻擊TPP、計劃等等 不只知道這是兇刀，還要知道他是怎麼來的 資安現況DemoDemo網站 event_id 連出去 4648：不保證有成功 被連 4624成功 4625失敗 4688 CMD任何指令被記錄於此 106：TaskRegisteredEvent 200：ActionStart, with PE name 切換 UTF-8 編碼：chcp 65001 winlogbeat:Realtime傳送終端log to surver Docker+kibana 兩面刃：網管與駭客都喜歡用的平行移動工具 psexec.exe 資安現況解決方案 工人智慧 -&gt; 人工智慧 AI判斷異常指令 神奇圖形化介面 判斷問題等級 快速勾勒回傳report 產生脈絡圖 cycarrier 節省專家繁瑣的日誌分析時間 系統引導人類做決策 累積更豐富的專家情資來讓平台自動Hunting 無人能取代的專家，彼此相輔相成","link":"/2018/03/13/Taiwan-Cyber-Security-Summit-2018-%E5%8F%B0%E7%81%A3%E8%B3%87%E5%AE%89%E5%A4%A7%E6%9C%83/"},{"title":"Tensorflow-GPU 環境配置","text":"Tensorflow-GPU 環境配置Author：William Mou點我進入個人 Blog 前言:::infoAI 發展日新月異，各軟硬體更是推陳出新，而其中 Tensorflow 與其依賴的 CUDA 更是當今潮流，但兩者版本卻多不互相兼容，常常有各種 Bug 。 故，今天實作一篇安裝成功的例子，盡可能完整的陳述相關知識，以及所需注意的地方；供大家參考與共同學習。若有任何不恰當或錯誤的地方，都煩請您聯絡作者修改，共同進步。::: 需求:::success安裝前，須先明瞭自己對於開發（潔癖）需求，以個人為例，我希望能夠在 VScode 中用 shift + enter run conda env 裡的 tensorflow-gpu with Cuda9 and Cudnn7 以清單表示：| |細項||—|————–||硬體|GeForce GTX 1080Ti||系統|Windows10 專業版||框架|Tensorlfow-GPU 1.9||版本|CUDA 9 &amp; cuDNN 7.5||環境|python3.5 conda(Anaconda) env||編輯器|Visual Stusio code|::: 正文安裝 CUDA:::info定義： CUDA 是由 NVIDIA 所推出的一種整合技術，在其製造的圖形處理單元（GPUs）之上，實現平行計算平臺與程式設計模型。透過這個技術，開發人員可了直接存取 CUDA GPUs 中的虛擬指令集和平行計算元件的記憶體，運用 NVIDIA GeForce 8 以後的 GPU 和較新的 Quadro GPU 進行並行計算。 [name=取自wiki] 作者案： 你可以將它看作是 NVIDIA 顯示卡專用的平台，讓開發者更輕鬆的以 CUDA C 或 OpenCL 撰寫代碼，並透過 CUDA 最終被驅動程式轉換成PTX代碼，交由顯示核心計算。 這種方法與 CPUs 不同的是， GPUs 有著側重以較慢速度執行大量併發執行緒的並行流架構，而非快速執行單一執行緒。擅長運算「小」而「多」的數據資料，尤其是圖像運算更是在行。 但這並不表示在相同的花費下，使用 GPU 訓練 AI 一定會比使用 CPU 來的有效益，端看數據的資料大小及其特性，有時候數台 Xeon 系列的 CPU 多核運算，會比 GPU 來的快或節省經費。::: :::success綜合上述，要在 Windows 平台安裝 CUDA ，我們需要準備一些其所需要的軟體，包括以下： Visual Studio 2017 用以編寫 CUDA 代碼，若無需求可不安裝。 安裝時，至少勾選 使用 C++ 的桌面開發 並且安裝位置建議放在 C:\\ （系統磁碟機） 作者案： Visual Studio IDE 有時候會有版本未識別錯誤的訊息，例如 CUDA 9 failed to support the latest Visual Studio 2017 version 15.5 可透過修改版本代號的方式解決 顯示卡驅動程式 依照自己的顯示卡型號下載 作者案： 務必注意自己得硬體型號，若不確定可以使用 NVIDIA 開發的工具 NVIDIA GPU Reader 辨識 以下提供安裝示意圖 ::: 接著，要來安裝本節主角： CUDA 與 cuDNN:::dangerCUDA 的版本較多，而每個版本有自己所對應的 cuDNN （將在下節介紹），為此，我們必須選定好適當的版本號，並謹記在心，以對應恰當的 Tensorflow 與 cuDNN。 建議各位在安裝前，可以去搜尋看看他人 Tendsorflow 與 CUDA 配對成功的版本，而這裡提供 其他作者 已經測試成功的案例： tensorflow 1.4 及以下的不支持高於 CUDA 9.0 。 tensorflow 1.0 及以上的不支持低於 CUDA 8.0 。 tensorflow-gpu 1.5 以上不支持使用 CUDA 8.0。 而本節，以 Tensorflow 1.9 與 CUDA 9.0 做為安裝範例。 ::: :::success首先，前往 NVIDIA 開發者的官網，下載 CUDA 連結點我 點選相對應的版本後，下載 Base Installer。 雙擊執行檔案 cuda_9.0.176_win10_network.exe 開始安裝 在檢查系統系統相容性與合約後 會進入安裝選項，建議可以直接快速安裝。 作者案 若沒有要使用Visual Studio 2017 編譯 CUDA 的朋友，可以進入自訂安裝中修改設定，將 Visual Studio Integration 關閉，避免報錯。:::warning若仍然遇到 安裝失敗的情形建議可至 這篇博客 依照步驟解決，本文便不多贅述。::: 安裝 cuDNN:::info定義： cuDNN 全名為：NVIDIACUDA®深度神經網絡庫 是用於 深度神經網絡 的GPU加速庫。 cuDNN為標準例程提供高度調整的實現，例如卷積，池化，規範化和激活層。而 cuDNN 同時也是 NVIDIA 深度學習SDK 的一部分。 全球深度學習研究人員和框架開發人員依靠 cuDNN 實現高性能 GPU 加速。它允許他們專注於訓練神經網絡和開發軟件應用程序，而不是花時間在低級 GPU 性能調適上。 cuDNN 加速了廣泛使用的深度學習框架，包括 Caffe2，MATLAB，Microsoft Cognitive Toolkit ， TensorFlow ， Theano 和 PyTorch 。 作者案 作為 CUDA 的一個深度學習加速庫， cuDNN 的版本必須配合 CUDA 才能正常運行。下面我們將演示如何正確的安裝 cuDNN 。::: :::success首先，前往 NVIDIA DEVELOPER 官網，點擊下載 cuDNN。註冊或登入跳轉至下載頁面勾選同意後，會跳出版本選擇此處，我們可以選擇適合的 CUDA 版本、與作業系統進行下載 作者案 此處選擇 CUDA 9.0 ，以應對上方我們所安裝的版本。 下載後開啟 解壓縮檔案 之後會得到一個 CUDA 資料夾，分別含有 bin 、 include 、 lib 三個資料夾 將其內部的檔案，分別移至 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0 路徑下的對應資料夾中 例如： bin 裡面，需包含 cudnn64_7.dll 再分別將三個資料夾的檔案拖移至對應的位置後，我們要將下列路徑加入環境變數中，以利將來調用 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\bin C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\lib\\x64 打開控制台→系統及安全性→進階系統設定→進階→環境變數（或是直接在控制台中搜尋 PATH）尋找「系統變數」中「Path」的部份並用左鍵雙擊，新增下述變數： C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\bin C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\lib\\x64 到此為止， cuDNN 的安裝就到一段落了::: 安裝 Anaconda:::infoAnaconda 是一種 Python 語言的免費增值開源發行版，用於進行大規模數據處理, 預測分析, 和科學計算, 致力於簡化包的管理和部署。Anaconda 使用 軟體包管理系統 Conda 進行包管理。 [name=取自wiki] 編者案 使用 Anaconda 的好處是他擁有豐富的套件包與良好的套件管理，在資源（硬碟）足夠的情況下，安裝它可以為我們省去很多套件相關的麻煩。 而其安裝過程較為簡單，唯一需要的注意的是，關於 Python 的 PATH 是否與電腦內存在的（例如：Visual Studio 自帶的 Python、 或是原生的 Python）產生衝突，若為第一次安裝則沒有這個問題。 而關於使用方式， wiki 寫得相當清楚，下方引用列出。 使用時，可以點擊啟動相應的編程環境： 123456789Python(shell) ： 標準CPythonIPython(shell)： 相當於在命令窗口的命令提示符後輸入ipython回車。pip install ipython安裝的ipython用法一樣。Ipython QTConsoleIPython Notebook：直接點擊打開，或者在命令提示符中輸入ipython.exe notebookJupyter QTConsoleJupyter Notebook：直接點擊打開，或在終端中輸入： jupyter notebook 以啟動伺服器；在瀏覽器中打開notebook頁面地址：http://localhost:8888 。Jupyter Notebook是一種 Web 應用，能讓用戶將說明文本、數學方程、代碼和可視化內容全部組合到一個易於共享的文檔中。Spyder：直接點擊打開IDE。最大優點就是模仿MATLAB的「工作空間」Anaconda Prompt ： 命令行終端支持其他IDE，如Pycharm 安裝包管理： 123456列出已經安裝的包：在命令提示符中輸入pip list或者用conda list安裝新包：在命令提示符中輸入「pip install 包名」，或者「conda install 包名」更新包： conda update package_name升級所有包： conda upgrade --all卸載包：conda remove package_names搜索包：conda search search_term 管理環境： 12345678安裝nb_conda，用於notebook自動關聯nb_conda的環境創建環境：在Anaconda終端中 conda create -n env_name package_names[=ver]使用環境：在Anaconda終端中 activate env_name離開環境：在Anaconda終端中 deactivate導出環境設置：conda env export &gt; environmentName.yaml 或 pip freeze &gt; environmentName.txt導入環境設置：conda env update -f=/path/environmentName.yaml 或 pip install -r /path/environmentName.txt列出環境清單：conda env list刪除環境： conda env remove -n env_name ::: :::success首先，我們進入 Anaconda 官方網站，並點擊右上方的 Download Anaconda。 選擇 Python3.6 64-bit版本 下載完成後雙擊安裝，以下為安裝過程截圖 可將兩者一併勾選，省去設定的麻煩 安裝完成後，我們可以打開 Anaconda prompt 創建環境 前面()表示我們當前的環境，我們需要創造一個專屬於 tensorflow 的環境，以免套件彼此間相互干擾，連跟新個版本都要綁手綁腳的。 依照 wiki 所說，我們可以使用conda create -n env_name package_names[=ver]來創建一個環境。 編者案 由於電腦已創建過 tensorflow 環境，所以截圖中的命名會多一個 -t 避免衝突 輸入 1$ conda create -n tensorflow python=3.5 他會提示你你的環境將放在何處。 輸入 Y 進行環境創建，他會預先幫你安裝一些套件 環境創建完成，依照命令行提示，你的環境被套件被放在 C:\\Users\\willi\\Anaconda3\\pkgs\\wheel-0.31.1-py35_0 ，可以輸入 conda activate 指令來進入環境，輸入 conda deactivate 來離開環境 接著我們進入環境 1$ conda activate tensorflow 使用以下指令來安裝 tensorflow 123$ pip install tensorflow# 或者$ conda install tensorflow 編者案 若有開發需求，可以如以下方式指定 tensoeflow 版本 1234&gt;# 移除舊有版本&gt;$ pip uninstall tensorflow-gpu==1.3.0&gt;# 安裝指定版本&gt;$ pip install tensorflow-gpu==1.5.0 安裝完成 使用 import 來檢驗是否安裝正確 123$ python# 進入 python 互動介面後&gt;&gt;&gt; import tensorflow as tf 隨後逐行複製以下代碼，檢測是否正常運行 GPU 123456789import tensorflow as tf# Creates a graph.a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')c = tf.matmul(a, b)# Creates a session with log_device_placement set to True.sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))# Runs the op.print(sess.run(c)) 運行成功應該如圖，輸出運行之顯示卡序號 1GPU 0 與運算結果 12[[22. 28.] [49. 64.]] ::: 安裝 Visual Stduio Code:::infoVisual Studio Code（簡稱VS Code）是一個由微軟開發的，同時支援Windows、Linux和macOS作業系統且開放原始碼的文字編輯器。它支援偵錯，並內建了Git 版本控制功能，同時也具有開發環境功能，例如代碼補全（類似於 IntelliSense）、代碼片段、代碼重構等。該編輯器支援用戶自訂配置，例如改變主題顏色、鍵盤捷徑、編輯器屬性和其他參數，還支援擴充功能程式並在編輯器中內建了擴充功能程式管理的功能。 [name=取自wiki] 作者案 作為一門編輯器， VS Code 具有跨平台、輕量、擴展性高等優點，使用容易上手，功能雖多卻不會像 Visual Studio 般繁亂，是個老少咸宜的好軟體。::: :::success首先，前往 VS Code官網 下載之 之後全勾安裝後打開，可以得到如下畫面 我們可以先至你想要編輯的資料夾，此處以這個 ai 資料夾為例 右鍵點擊 Open with Code 之後 VS Code 就會將此資料夾作為一個工作區，在 VS Code 中開啟 之後點擊紅框處的新增檔案，創建一個測試用的 .py 檔。 接著，將以下 tensorflow 官方測試代碼複製到檔案內。 1234567891011import tensorflow as tfclass SquareTest(tf.test.TestCase): def testSquare(self): with self.test_session(): x = tf.square([2, 3]) self.assertAllEqual(x.eval(), [4, 9])if __name__ == '__main__': tf.test.main() 此時，因為你所處的環境是 Anaconda 預設的環境中，並不包含 tensorflow 套件，所以會報錯。 我們可以點選左下角的選項，以察看與切換環境 點擊後，我們可以切換到到方才設定的環境 tensorflow 此時，我們可以注意到右下角的 pylint 以及諸如此類的提示，可以選擇安裝他們，讓開發更加順利。 下方命令行會自動打開，並顯示已成功安裝。 接著，點選左邊的紅框處，然後按下綠色三角形箭頭偵錯 選擇 Python 若得到以下畫面則代表設定與安裝順利 之後也可以使用 F5 來偵錯。但若有其他慣用偵錯快捷鍵，可以透過 Ctrl + Shift + P ，搜尋開啟鍵盤快速鍵或是使用 Ctrl + K 緊接著按 Ctrl + s 來開啟 接著上方欄位中搜尋 F5 點選左邊的小鉛筆，再輸入你想要的鍵盤快捷鍵後按 Enter 就大功告成囉。 ::: 結語希望讀者都能夠在本筆記中學到想學習的東西，也恭喜您成功設定完成 Tensorflow 的基礎設定，但 AI 的學習如同汪洋大海般，遠不只如此，僅此希望能夠帶給您一個好的開始與學習體驗，持之以恆，努力前進。共勉之。 :::warning若對於此筆記有任何錯誤、或是沒有詳盡提到的地方，都非常期待您與我聯絡，能與您的共筆是我的榮幸。歡迎將更多的建議寫在其他 HackMD 中，我將以連結的方式將其引入；或是將建議寄送到我的信箱： william.mou960174@gmail.com 。::: 其他參考資料https://blog.csdn.net/LOVE1055259415/article/details/80343932https://zhuanlan.zhihu.com/p/30324113https://rreadmorebooks.blogspot.com/2017/04/win10cudacudnn.htmlhttps://zhuanlan.zhihu.com/p/37086409","link":"/2019/01/13/Tensorflow-GPU-%E7%92%B0%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"title":"Web 開發者技能樹演講","text":"Web 開發者技能樹演講 2018/08/24原筆記網址：https://hackmd.io/S_BIlfpyRxGJWiLb5E7Nvg?view 我要提問 關於我 宏碁 摩茲工程師 今年年初遭到裁員（自由的狐狸） 今天你將學到 web 開發基礎 前端技術 後端技術 開發及維護 以上的概要 看完就九死一生,不看就十死無生web 的好處：全公開標準很多資源很多工作，不怕找不到工作 前端？後端？開發及維運？ 前端前端就是你看到很美的東西。 後端後端就是後面很醜的東西你看不到。 開發及維運十萬個正妹及十萬個看不見的東西如何維護。當專案變大後，會變得相對重要。 踏入 Web 這塊，你可以先選擇你要走前端還是後端。如果你走後端，但又沒有走太深入，可以試試看走 DevOps（開發及維運） Web 開發基礎 資料結構及演算法 HTTP / HTTPS 和 Web API SSH 及簡單的命令列操作 Git / GitHub 資料結構與演算法可以自行 Google，總之很重要 HTTP / HTTPS 和 Web APIHTTP 協定 1.0/1.1/2，HTTPS加密 要寫 Web 要很清楚 HTTP 協定是甚麼 要知道 HTTP 是怎麼加密的HTTP 請求方法 HTTP 狀態碼 2XX：成功 3XX：重新導向 4XX：使用者錯誤 5XX：伺服器錯誤發送對的狀態碼給用戶很重要 Cookie &amp; CacheCookie因為 HTTP 沒有狀態，因此 Cookie 被發明出來，可以用來記錄狀態 Cache快取可以讓用戶在下次瀏覽時更加快速，也減輕伺服器負擔 SSH 及簡單的命令列操作SSH 相關指令、金鑰控管如題 Shell Script（BASH, zsh.. 等）可以透過 Shell Script 自動執行一些指令 Linux 服務及運作原理要知道其原理，以及如何去開關一些服務，才能有效管理你的程式與服務 Git / GitHub(全球最大男性工程師交友網站)最近最流行的版本控制是 Git，但也有其他的版本控制軟體 個人可以透過版本控制來管理複雜的版本 團隊把所有人寫的程式合起來，可以有效解決空間與時間的限制。 了解 git 的運作方式以下略，總之就是 Git，我相信大家都已經會了 OwO GitHubGitHub 是用 issue 的方式來管理 進階開始 Web 服務流程 有人會畫 Markdwon 流程圖嗎QQ使用者 - 前端 - 後端 Web 前端技術的概要 HTML：標題與目錄，一個簡單的 document 檔案：語法、元素、建立 DOM tree 和相關屬性 CSS：網站的外觀與美化，用於潤飾網站，進階一點的內容有 Flexbox、Grid 等 JavaScript：如何操作 DOM、事件傳遞、物件、Ajax&amp;XHR、ES6 選修 jQuery：可以讓你寫 JS 的時候更簡單 VBScript 已死 [name=蔡孟達] 基礎練習如果沒基礎，可以嘗試構思不同的響應式網頁（RWD）來練習，使用 JavaScript 加入互動 如果不會可以在 GitHub 上找開源專案，找找 Good First Bug 可以解 進階 NPM / Yarn 套件管理腳本，講者喜歡用 NPM，可是我是 Yarn 派的 PostCSS CSS 的前處理器，讓 CSS 更好管理 Bootstrap 響應式網頁的框架，可以快速開發出響應式網頁 Webpack 打包靜態網站所需要的資源 ESLint JavaScript 程式碼檢查工具進階練習可以嘗試新增一個專案，讓自己充分了解並練習如何將複雜網站從開發到釋出的流程 高級 熱門前端框架： React：開發者滿意度最高，可是他背後的公司(FB)很母湯，有問題可以問江俊廷 Vue：壯哉我大 Vue，是最近最熱門的前端框架，有問題可以問陳威任/姚韋辰（其實還有火柴） Angular：Google 出產，目前最冷門的ㄏ，Angular和 Angular2是不同的東西，Angular 已經過時了，時代的眼淚，千萬別搞錯ＸＤ 測試工具：單元測試、整合測試及功能測試 伺服器端渲染 更多：Canvas、HTML 5 Web API、WebGL、SVG 人家大神ni 前 Mozila 台灣區產品經理 Web 後端技術 Scripting：Python、Ruby、PHP、Node.js Commercial：Java、.Net New：Golang、Rust、Kotlin、Swift 基礎練習學習使用套件管理，開始練習簡單的輸入輸出、封裝及釋出專案在 GitHub 上找技術開源專案,找找 Good First Bug 可以解 進階框架資料庫 關連式：MySQL、PostgreSQL 非關連式：NoSQL、MongoDB 快取：Redis、Memcached 授權及認證：OAuth、JWT OAuth 介紹：https://www.dcard.tw/f/tku/p/227852547 進階練習 實作一個部落格 RESTful API 來完成 登入 文章 高級 搜尋引擎：ElasticSearch、Solr 如果常規的資料庫無法應付的話，可以考慮用這個 訊息接收器：RabbitMQ、Kafka 不可能讓使用者在等待，所以會用 Message Queue 其他：Docker、Nginx、Apache、GraphQL、Graphic 資料庫 Docker：可以把系統環境包起來，讓你可以快速在任何地方建置起來你的服務，也可以提升安全性 Nginx、Apache：網頁伺服器開發及維運（DevOps） 基礎不適合新手跳進來的領域 作業系統概念： I/O 管理 虛擬化 記憶體和儲存空間 檔案系統 處理程序管理 線程和並行處理 Socket 網路和安全: DNS HTTP HTTPS FTP SSL TLS 伺服器管理: Linux Server Ubuntu：新手向（？ Debian：穩定到爆的伺服器系統，但軟體都喜歡用舊一點的（因為穩定） CentOS：背後有大公司支援的伺服器系統，也滿穩的 Red Hat Enterprise Linux（RHEL）：大公司支援的，但超貴， OpenSUSE：大蜥蜴（？ 是變色龍! 基礎練習 安裝或是使用已有的 Linux Server 練習命令列操作：Shell Script、文字編輯、編譯 App、調校系統效能、監控管理程序、網路管理指令 進階 架設服務 Web Server Cache Proxy 負載平衡 防火牆 如何擴展服務 容器（Docker） 組態管理（Ansible） 架構管理（Terraform） 學習持續整合與持續發佈(佈署) example: 某訂房網站：完成開發後送到雲端上，若有問題則自動下架，回到前一個版本。 監控: 紀錄檔 基礎設施 應用程式 雲端服務廠商: AWS（Amazon） GCP（Google） Azure（Microsoft） Heroku：和上面的有點差別，滿陽春的，但勝在方便和快速 額外資源 持續學習,持續進步!(謝謝)(…)Mozila 講很多～ Free Code Camp RealWorld 系統設計入門 JavaScript Testing in 2018 系統設計入門(繁中) 提問： Ｑ：我想知道現在 Web 工程師寫網頁時通常都在哪個瀏覽器上測試OuOＡ：Google Chrome 先測，Firefox 和 Safari Mobile 。先測當前版本，往前往後兩個 Ｑ：台灣 Firefox 社群最近有哪些坑，有哪些適合後端開發者關注的？Ａ：Rust Ｑ：有什麼推薦的 GitHub 開源專案或 Good First Bug 嗎？哪裡容易找到 Good First Bug 呢？ Python 網路爬蟲今天你將會學到 什麼是爬蟲 Python 虛擬環境 用爬蟲抓取網頁內容的程式 用爬蟲抓取 iCook 最新食譜並建檔 什麼是網路爬蟲 自動抓取網頁內容的程式 代替人進行重複且繁瑣的資料收集工作且不出錯 例如:收集十萬筆Google搜尋結果的標題 為什麼要學習 Python 使用時機 大數據資料分析和呈現 人工智慧模型訓練 ex: 熱門話題分析、價格歷史波動和預測 Python 易於上手，且在各領域被廣泛使用 建立開發環境 Python3、Pip3 VirtualEnv 學習資源 Requests BeautifulSoup4 (bs4) requirements.txt 更多 瀏覽器開發者工具 處理登入狀態 前端動態渲染內容 其他爬蟲常用框架或是涵式庫 使用爬蟲的正確禮儀 構思甚麼是你/你想的第一個爬蟲?","link":"/2018/08/24/Web-%E9%96%8B%E7%99%BC%E8%80%85%E6%8A%80%E8%83%BD%E6%A8%B9%E6%BC%94%E8%AC%9B/"},{"title":"Who Am I ?","text":"我是誰[自介]牟展佑，松山高中高一自學程式，高二實作專案ChatbotUnity 3DBlockchain以太坊智能合約機器學習 其中運用Python solidity c++ 等語言 過程中一起研究專案，在群組內鼓勵每個人提出自己的想法，共同開發，一起解決困難。 之後也將這些技能與個人興趣、金融、公民社會等領域結合，其後也獲得NASA黑客松、旺宏科學獎入圍等獎項的肯定。 更在中研院與 SITCON 共同主辦的學生計算機年會上，發表區塊鏈的演講，主要受眾是大學生，透過講述區塊鏈以及以太坊的基本知識，希望能將我所學分享給更多人，更期待大家可以著手實作，改善生活。 [影片] 關鍵！嚮往：做一個有故事的人。多元並列觀點我講得都不是對的 學習 如合學習–我的學法 Just do it &amp; Google 說來簡單做來難 你打開手機 chrome. 看看搜尋了什麼 想想一天有多少時間，被動接收資訊 滑了一天FB卻想不起來剛剛看了什麼 主動才是完整的學習，才有真正收穫 定義好目標結果，然後把結果當起點 如何確認–費曼學習法的四個步驟 教自己、教人 如何維持學習的熱忱–唐鳳 學習的初衷通常是想要弄懂一個東西，學會了一部分後就會認為「就這樣啊」 所以就像火箭一樣，一段一段發射需要獲得補充包。 舉例而言，研究一輛三輪自駕車 一開始是「好奇」，但是好奇過後 我們可以嘗試去「創造」，例如三輪自駕車的表達與使用方式等 透過這些創造我們會去學習新的領域，進而產生更多的好奇心 如此產生一個循環！ 挫折時，分享歌曲：曾經的我們https://www.youtube.com/watch?v=crIP7PuC8Bc 白天是學習的時間，晚上是創造的時間 善用資源 學校資源 學校環境 導師專業 人脈資源 善用死線 善用行事曆 好軟體介紹 hackmd trello scrum telegram git magnet docker zoomus iterm2 zsh(omz) tmux 邏輯思維、突破 成長與青春 人生中除了學習，我們更常遇到的煩惱是青春 與父母討論事情，時間很重要 推己及人，累的時候不說難話 剛下課，開車、剛下班，在玄關，母湯 洗完澡、吃完飯後，可能是比較適合的時間 爸媽有偏見→要把好的一面告訴父母 不是他們有偏見，是我們讓他們有偏見 父母不討厭社團，有頭有臉的都是社團的 社團教你神麼？ 有偏見應該一開始就消除 家人的陪伴如何實現？ 就算沒有時間，也可以在他累的時候傳訊息給她。 就算時間不多，也盡量在僅限的時間內全心全意的陪他 青春很多煩惱，但要珍惜的走下去 分享歌曲：明天你好 怕跌倒，卻只能奔跑 長大了才能夠不去選擇 兒時不成熟才會選擇ex要不要去上學 當我朝着反方向走去，樓梯的角落找勇氣 回顧、反思過去，成長的選擇： 選擇松山不選離家近的？ 二選一：當初選擇妥協還是自我？ 記得：有可能這輩子的巔峰就是此刻 唸台大…為了從台大出去 累的時候看看轉角，自己的起點決定你的終點： 快樂的班聯人？交朋友？負責的班聯人？ 當初的選擇決定你很累時，怎麼做？ 行銷 做出來的東西要給別人看 分兩組，兩兩坐，旁邊熟的舉手 遊戲內容： 熟的舉手 不熟的像剛剛我自我介紹一樣 你是誰 你的專長 你的小不擅長 遊戲目的： 學會去認識人 遊戲引導： 認識人不是時間問題 認識人是願不願意開口的問題 認識人需要契機 多去參加各類研討會活動 會見到與認識很多人 介紹研討會 我好像在哪裡看過你 有做過的事情，適當的告訴別人 除了行銷自己 更能找到同夥 不吝嗇交流-你永遠都不是最強的那個 走出第一步 不要害怕做 blog、寫文章是浪費時間 讓你整理思緒 讓你紀錄生活 讓你有「故事」的資本 有情感才銳變成故事 沒情感只是事蹟 人脈管理https://hackmd.io/s/HksXDjdGV 團隊 做事重要還是感情重要？ 都重要 可能當下偏哪一邊，但心中一定是「都重要」 保持專注，工作分配平均→互相cover 但磨合!=配合 (互相做自己)!=(配合別人) 讓大家做自己擅長的事情 縱使很累，若能夠做自己喜歡的事情，發現團員的能力與缺點，團隊能夠很投入 常常覺得很多事情一個人可以做到？ 團隊夢想要更大團隊問題我很假","link":"/2019/01/27/Who%20Am%20I%20/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/12/23/hello-world/"},{"title":"區塊鏈應用場景高峰會","text":"區塊鏈應用場景高峰會 &amp; Block Chain Insighttags: 資訊講座 區塊鏈 能源、醫療、食安、與區塊鏈 泛科知識 總編輯 致詞 感謝中油國光合辦 區塊鏈應用與服務創新議題 （Reki吳李祺 博士） 與大家分享區塊鏈研究成果 前言 比特幣與區塊鏈 關於資策會 虛擬貨幣(Crypto Currrencies) 虛擬貨幣=火車 區塊鏈=鐵軌 區塊鏈的核心概念 共享帳本 智能合約 個人隱私 共享網路 這情形 10,25 年前遇過 雲端計算 Internet 當每一個新的科技與概念出現，都經歷過「這是什麼？」 What is Blockchain Block chain is a Distributed Ledger 分散式帳簿 Bitcoin 萊特幣 Block is World Computer If a surver has missed.. We would like to create a world computer to be a world surver Blockchain is a smart contract Block is a Enterprise Solution Hyperledger 分散式帳本專案 區塊鏈專案 Enterprise ethereum alliance 希望有一個公開的環境供企業使用 本文：區塊鏈於產業的應用 Public or Enterprise(private) 公有鏈 vs 私有鏈（企業解決方案） 國際概況:ECO System 我國樣貌： 創新主題應用： 公義眾籌 不可竄改 金流追朔 透明信任 紅利點數交換 兌換合約 追溯驗證 低營運成本 發行成本見低 即時交易清算 合約執行，簡化清算流程 點數彈性轉移 消費軌跡透明易稽核 電子票券（企業授權給使用者使用的手段） 授權發行 周邊效益 C2C互動 票券安全防偽 資訊共享又保障隱私性 介面統一，串連周邊 個人靈活轉讓 主題發展：勢不可擋 以下工商 應用共創中心（Chaincenter） 區塊鏈創新服務推動 產業發展議題與技術規格需求 Go-Labs 產業結盟 實證規劃： 法律詢問 情境研究 技術顧問 區塊鏈產業聯盟／協會 建立典範 產業共識 政策建言 106研究報告：洞察區塊鏈 結論 In the future Blockchain is not Bubble 新的技術出來時，我們習慣用已知的事情說明他 然而，新技術已經用不同的邏輯來思考了 數位世界中的資產交易-數位資產 Cypto Kitties 改變-從資訊分享到價值轉移 網際網路(Web 2.0) 資訊分享 傳遞複製 區塊鏈(Web 3.0) 價值轉移 信賴機制 Blockchain:The Trust Machine 共識科技 代幣去中心化應用 避免資料被單一平台控制 分散風險 資料不易不見 ICO ICO 區塊鏈上的募資手段(方便 募集有價值的虛擬貨幣作為全新的募資手段 公司給予楙買者公司發行的代幣，可在區塊鏈上自由分割、移動、交易 目前95%以上公司發行代幣使用Ethereum平台，ETH為通用貨幣 2017年3~12月ICO金額已達到70億美元，超越VC投資總和3億美元 2018每年ICO更達到13億元 ICO代幣市值500億美元 委內瑞拉都想發行石油幣 ETHEREUN ERC-20TOKEN 乙太幣支持智能合約 叫比特幣優秀 （比特幣也有智能合約系統 中心化交易所 但是代幣交易所可能被駭客攻擊 不能確定交易對象 規則不確定 因人而異 礦工決定交易是否成功 交易不一定成功 不成功還得付手續費 混合式去中心話 包含中心化的安全 還有去中心化的速度 ps 歌手登記創作音樂要去國家圖書管~~ 音樂的區塊鏈應用 買公播權 創作不易被偷 不會消失 分布式能源 運用區塊鏈科技釋放再生能源大潛力 DTCO Compay Profile 過去 2016生技新藥：IPSeeds 2017健康醫療產業：phrOS 2018協助原住民社區建立自己的數位身份：IDGO 業務 提供智能合約設計 提供能源區塊鏈改善 能源問題 Extreme Weather, Climate Change PM2.5 看遠一點 放眼未來 電網 設備都是屬於19世紀留下的 傳統的無法支持現在的綠能 無法創新 因為只有他一家而且算是獨佔事業 文化娛樂產業區塊鏈生態 Bitmark 數位資產 區塊鏈可以解決娛樂產業的問題 盜版 無限量發行「限量」虛寶 創作分潤不夠透明 區塊鏈可以創造娛樂產業的機會 利用區塊鏈作群募 確時執行限量發行 創造社群 健康醫療金融服務區塊鏈應用前言-現況 作者 黃家煦 博士 睿富金融科技／吉立生技 區塊鏈應用發展的現況 先有數據才有AI Blcokchain Startups 台灣電子病歷管理現況 電子病例交換中心 中央健保署 憑證中心 甲醫院 乙醫院 健康存摺 台灣醫療費用支付的現況 健康醫療服務為何需要區塊鏈？ 去中心化與識別化-落實個資保護與資料管理 醫療資訊即時交互與互信-不需重複檢查 病例可惜與即時性醫療資訊-緊急治療與急救 個人病歷成為個人資產-國際通用 實踐共享經濟-健保ICO 如何應用區塊鏈於醫療領域 DR.PAY區塊鏈方案-混合式區塊鏈 醫院方 區塊鏈 第三方軟體 DR.PAY區塊鏈方案-Hybrid Blockchain DR.PAY醫療數位金融服務平台 案件登入 病患醫療分期支付 醫院代表接收 DR.PAY生物辨識機制 診所客戶-通過DR.PAY KIOSK 人臉辨識 指紋辨識 健康辨識 DR.PAY綜合信評機制 社群網路平等 健康紀錄平等 財務紀錄平等 最終憑膽紀錄 DR.PAY所包蘭的服務 客戶查詢 合約資料 醫療紀錄 電子支付 建立中-跨境第三方支付 合約與交易紀錄 嬌寵醫生(寵物醫療)+DR.PAY(四月上市) 結論 區塊鏈是好工具，善用工具創造產業價值 資料（數據）是王道，得資料者得天下 健保資料庫是公有財，開放共享經濟 擁抱ICO，再創台灣資訊產業的榮景 奧丁丁OwlTing 工商ＱＱ OwlTing Services in one page BLockchain OutNet Outchain 不斷拜訪生產者 關鍵對談：區塊鏈法治議題 在新的法律中，「電子簽章法」「金融電子沙盒」「金融創新實驗條例」等等，公司認為有哪裡需要調整的？ * 台灣是個守法的國家，但是無法就是違法，政府法律可能限制新創的開發，建議參考其他國家的法律 * 很多事情政府要管，先做了再說，之後就很難受，希望政府能夠將細則講清楚，使業者得以遵循與討論 * 可能不該比較鄰近國家，可以比較墨西哥，看看合法後，我們能變成什麼樣子，台灣法律仍然是極權的管制，而這與實際上民主的風情不相符。企業應自己自律，不是在搞破壞或騙人家可以先做。 * 使用加密貨幣的人，通常都是去中心化的信仰者。但若要跟隨政府腳步，那等法律出來就不用做了。在台灣，我們的法律應該是一個負面表列，現在政府沒有立法ICO到底能不能做，那應該憑良心快點做。你說虛擬貨幣剛出來的時候，中國做了再說，不合法在繞過它，而這也是台灣相對的一個缺點。另外，虛擬貨幣沒有地方可以追溯，政府很難管理，建議列出一些規範或方向，讓企業盡量去遵守 在目前政府的整個法令，有無需要建立一個區塊鏈的標準或消費者保護機制？或說國外是否有一個好的機制可供借鏡 * 關於這個問題，政府就算定了，也不一定有用。那你說以太坊是一個組織嗎？不是。整個以太坊是一個共識，政府要來規範，必須要有技術、要有社群，區塊鏈才能繼續走下去。 而國外的還是以民間為主，社群導向，而政府的動作是相對慢的，其實我還是不看好政府ＱＱ * 我們這個虛擬世界的區塊鏈，早晚是要跟實體世界接軌，所以我們還是要遵守政府的一些規則。 而日本政府是可以借鏡的對象，透過良性的監管，合理地在資安制定一些規則，希望台灣政府可以往日本這樣的方向，而不是往中國大陸的方向 * 我覺得做一個技術標準是相當困難的事情，畢竟區塊鏈是跨國的技術，你要制訂標準誰會聽呢？我們又不是汽車製造大國，所以我認為關於技術，要與時俱進，而關於保護消費者，我認為依然是要沿用的。 * 我之前就是做政府的標案，大概理解一些政府的想法。應該是訂大方向，而不該訂細節。區塊鏈架構也是，我們應該用獎勵的方式，訂定雙方的平衡等，而不該往所有細節訂定 關於個資法：若有特殊需求等等，需要取得個人的紙本簽名，提醒各同業需要小心 自由提問時間： 國家有本來的用途，但是若失去稅金、去中心化後，政府如何經營？ 政府存在也不過是短短的時間， 網路和區塊鏈形容成多中心化，它可以使企業往前走，而比特幣是不是只是一個貨幣，我想這跟台灣是不是一個國家是同樣的問題。 你想一個人的生活環境，只有區塊鏈能活嗎？我們還是要生活，而在做區塊鏈的同時，仍要與生活結合，而政府可以從其中課稅，沒問題。 ICO是一個特殊的管道，若經過ICO後，併購等等仍然需要利用ICO嗎？ 投資人角度，是因為投機嗎，還是因為長期投資，而這樣的 我覺得ICO在多中心化有巨大的貢獻，我們知道公司在集資是多大的辛苦。 台灣一個新創公司很難拿到錢，我覺得這是一個很偉大的發明。現在所有的ICO是天使融資，因為ICO沒有限制投資的門檻，雖然現在90%ICO都可能會倒，你也知道IPO 90%的新創公司都會倒，那你在ICO中投注，那你之後也可以享受很好的生活。說個故事我到台灣所有的創投去拜訪，三個月只找了20多家，而在ICO之後，只要你做得好，全世界每個角度的人都可以看到你，投資你。 科技日新月異，關於量子電腦的產生，也許新的硬體會使區塊鏈崩潰？ 量子電腦仍然是電腦，其實他的算力還是不會比挖礦機好。挖礦機高度平行化的單元，兩台屌打100台天河二號。而若新的電腦出現，算法本身是一種共識，仍是可以改的。 我們現在好不容易有一種監理沙河，我們從科技的角度當然是希望他月開放越好，但政府和民眾都有疑慮，我有個狂想，是不是能像以前加工出口區的方式，個點開放，若真的很成功，再拓展到其他城市，不知道這樣想法是否可行？畢竟歷來想要發展新科技，都要有個破口？ 這是一個好想法，政府也想過了，但又回到一個基本的問題，台灣太過 民粹 ，哪個地區要給產業嘗試，再說台灣土地又太貴，而居民不一定會同意，如同博弈法，當地居民有可能不同意，受到非常大的限制。","link":"/2018/03/21/%E5%8D%80%E5%A1%8A%E9%8F%88%E6%87%89%E7%94%A8%E5%A0%B4%E6%99%AF%E9%AB%98%E5%B3%B0%E6%9C%83/"},{"title":"完整學習機器學習實錄1——安裝 Ubuntu 18.04","text":"完整學習機器學習實錄1——安裝 Ubuntu 18.04前言 本系列將紀錄作者在學習機器學習的同時，曾經踩過的坑與詳細的操作記錄。 一方面希望之後能夠在不久的未來回顧過去所為、遇到相同的問題時能夠讓迅速找到答案；同時也希望幫助在類似環境下學習的朋友，能夠有一套較詳細的學習筆記，共同勉勵與成長！ 一篇重要的雙系統筆記與安裝前置作業，有需要雙系統的讀者請建議閱讀：https://medium.com/caesars-study-review-on-web-development/win10-and-ubuntu-%E9%9B%99%E7%B3%BB%E7%B5%B1%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98-bc824bef7fb4 硬體配置12345MB : X299 AORUS Gaming 9CPU: Intel I9-7920XRAM: DDR4 HyperX 128GSSD: Kingston A1000 NVMe PCIe SSD 960GGPU: Nvidia GTX 1080ti (ROG-STRIX-GTX1080TI-O11G-GAMING) 這邊需要注意的 MB 與 CPU 經由老外實測^1，是可以運行 Ubuntu 的，所以如果出問題，不需要先去考慮是主板與 CPU 不支持。 SSD 是 NVME 協議，LINUX 理論上是支持的^2，組配時需確定主板支持才行。 GPU 是 Nvidia ，自古以來 Nvidia 這類外接顯卡在 LINUX 上都需要另外安裝驅動，比較麻煩些，但也不得不用是吧。 系統安裝筆者打算安裝此時最新的 Ubuntu 18.04 ，並且實現 Windows 10 與 Ubuntu 雙系統。雖然可能會遇到不少坑，但畢竟他是 LTS 版本，選用還是有點保障的。 基本知識安裝系統涉及主板等許多基礎知識，這邊以條列式記錄，並且附上連結，有興趣大家可以自行研讀，但至少要了解它的功用與存在意義。 UEFI：Unified Extensible Firmware Interface 統一可延伸韌體介面，用來定義作業系統與韌體的中介 ^3，過去舊稱為 EFI，是用來取代 BIOS 的一種新定義。^4 韌體的階層位置![韌體的階層位置](https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/Efi-simple_zh-tw.svg/1920px-Efi-simple_zh-tw.svg.png =400x) BIOS 與 UEFI 的外觀差別 韌體（固件）：firmware 顧名思義，韌體的所在是位於軟體和硬體之間的。像軟體一樣，他是一個被電腦所執行的程式。現已演進為一個硬體裝置當中的可程式化的內容，通常可用 電流清除並重寫 或 更換儲存媒介 的方式更新。 俗稱刷 BIOS 就是在刷韌體 Legacy/CSM：在 UEFI 普及後，我們時常可以在主機板選項中看到這兩者之一，開啟、關閉分別代表是否兼容傳統 BIOS 。這是在標準整合的時代，必然會出現的混亂選項，之後有望完全脫離 CSM^5 微軟的 UEFI 推廣計畫： 類別0，這類系統使用x86 BIOS韌體，只支援傳統作業系統。 類別1，這類系統採用支援UEFI和Pi規範的韌體，啟用CSM層功能，只支援傳統作業系統。 類別2，這類系統採用支援UEFI和Pi規範的韌體，啟用CSM層功能，同時支援傳統和UEFI啟動的作業系統。 類別3，這類系統採用支援UEFI和Pi規範的韌體，不再提供或完全關閉CSM層功能，只支援由UEFI啟動的作業系統。 類別3+，在類別3的系統基礎上提供並啟用Secure Boot功能。 若您的系統都以 UEFI 安裝，理論上開啟與否都不影響，但是為了更好的兼容，通常建議開啟 CSM 後選擇 UEFI 優先。（金士頓的官方說明^6 與 SSD 疑惑^7） Secure Boot：中文稱安全啟動，也就是主機板只認定「安全的系統」，才能夠順利啟動，目前被認定為安全的系統有以下等，不少 Linux 發行版也通過「安全」認證。 Windows 8 and 8.1 Windows Server 2012, and 2012 R2 Windows 10, VMware vSphere 6.5[52] Fedora (since version 18) openSUSE (since version 12.3) RHEL (since RHEL 7) CentOS (since CentOS 7[53]) Ubuntu (since version 12.04.2) FreeBSD 而更詳記得內容如下文所述^8： The UEFI 2.3.1 Errata C specification (or higher) defines a protocol known as secure boot, which can secure the boot process by preventing the loading of drivers or OS loaders that are not signed with an acceptable digital signature. The mechanical details of how precisely these drivers are to be signed are not specified.[49] When secure boot is enabled, it is initially placed in “setup” mode, which allows a public key known as the “platform key” (PK) to be written to the firmware. Once the key is written, secure boot enters “User” mode, where only drivers and loaders signed with the platform key can be loaded by the firmware. Additional “key exchange keys” (KEK) can be added to a database stored in memory to allow other certificates to be used, but they must still have a connection to the private portion of the platform key.[50] Secure boot can also be placed in “Custom” mode, where additional public keys can be added to the system that do not match the private key.[51]Secure boot is supported by Windows 8 and 8.1, Windows Server 2012, and 2012 R2, and Windows 10, VMware vSphere 6.5[52] and a number of Linux distributions including Fedora (since version 18), openSUSE (since version 12.3), RHEL (since RHEL 7), CentOS (since CentOS 7[53]) and Ubuntu (since version 12.04.2).[54] As of January 2017, FreeBSD support is in a planning stage.[55] MBR 與 GPT：兩者分別為傳統 BIOS 與新型 UEFI 的分區結構，狹義的MBR 可以單止 BIOS 的系統引導程序，與之相對應的是 UEFI 的系統引導程序分區 ESP（EFI system partition）。 GPT 好處為近乎無限的分區數量以及識別無限硬碟大小。 MBR 僅限制 2T 與 4 個主要分區，但存在較好的相容性。 單以一張圖可以這麼解釋兩者差別，MBR 主要受限於其分區、引導等內容都儲存在第一個分區，而這個分區的大小會影響其發展可能性： 這部分較為複雜，牽扯到系統啟動時所需要查找的硬碟分區、以及其紀錄方式等，詳細內容可以查看這篇文章^9或是較口語化的這篇^10。 在 windows 以 UEFI 啟動電腦的流程：Bootloader（引導）代碼及配置文件存於系統盤的ESP中。其中如圖深灰色層，Win10自帶的 Bootloader 為 Windows Boot Manager ，而同屬相同層次 ubuntu18.04 自帶的 Bootloader 為 GRUB2 。 目前實現 win10 / ubuntu18.04 雙系統有兩種方案： 在深灰色層，仍染以 Windows Boot Mananger 為主引導，但需要關閉 UEFI 和 Secure Boot，開啟Legacy / CSM，最後通過 EasyBCD 手動添加 Ubuntu 入口。 在淺灰色層，就交給以 GRUB2 作為主引導，使其生成開機選單。 顯而易見的，第二種方案更省時省力。 前面有提到，Ubuntu 已經通過 Secure Boot 的認證，所以如果以 GRUB2 為主導，其實不需要關閉 Secure Boot 依照邏輯也得以正常啟動。 製作與開始安裝 Ubuntu 使用 Ultraiso 選用「寫入硬碟映象」製作一支 ubuntu 18.04 的開機碟 使用 Win10 自帶的硬碟管理（開始鍵 + X ➡️ 選磁碟管理），在 C 磁碟（系統盤），右鍵「壓縮卷」，依個人狀況選擇留給 Ubuntu 的大小。 到 BIOS 將 Legacy / CSM 兼容打開，Secure Boot 可以保持原設定，將帶有 UEFI 前綴字樣的隨身碟設為首選開機。F10 存擋並重新啟動。 此時會進入 Ubuntu GRUB2 的引導開機介面，選擇 install Ubuntu 後正常情況會順利安裝。 這兒筆者遇到兩個狀況，第一是點選 install 後卻因為 ACPI error 而導致黑屏死機，必須強壓電源關機。在此紀錄筆者排除此狀況的流程。釐清問題 — ACPI 是啥？ 進階組態與電源介面（英文：Advanced Configuration and Power Interface，縮寫：ACPI），是1997年由英特爾、微軟、東芝公司共同提出、制定提供作業系統應用程式管理所有電源管理埠，是一種工業標準，包括了軟體和硬體方面的規範^11。 換句話說，這又是一個 UEFI 社群的新規章，他定義了一些特殊的電源使用方式，例如下面這些功能^12: 用戶可以使外設在指定時間開關。 使用筆記本電腦的用戶可以指定電腦在低電壓的情況下進入 低功耗狀態，以保證重要的應用程式運行。 作業系統可以在應用程式對時間要求不高的情況下降低時鐘頻率。 作業系統可以根據外設和主板的具體需求為它分配能源。 在無人使用電腦時可以使電腦進入休眠狀態，但保證一些通 信設備打開。 即插即用設備在插入時能夠由ACPI來控制。 問題的發生 Ubuntu 18.04 沒有原裝 Nvidia 顯卡的圖形驅動，導致無法正確透過 ACPI 調用電源管理而出錯。^13 問題的解決 我們可以透過更改 GRUB2 的啟動參數來「迴避」這個問題。^14 再進入選擇 Try Ubuntu 或 install Ubuntu 的頁面，在選項上按下 e ，隨後可以進入 GRUB2 的參數修改介面，在 Linux 那行，後方刪除三個 --- 後加入 acpi=off 錯誤示範： 正確示範： 接著在開機時，要壓住 shift ，再次進入 GRUB2 並且做相同的設定。如圖片中倒數第二行，一樣加在 Linux 那行。 開機後可以使用以下指令安裝 Nvidia 驅動sudo add-apt-repository ppa:graphics-drivers/ppasudo apt-get updatenvidia-smi 後可獲得建議安裝指令sudo apt-get install nvidia-381 (後面請選擇適當的或最新版本) 如果仍然出現問題可以編輯 /etc/default/grub ，加入 acpi=off但是要注意可能發生 CPU 風散停止的問題。 問題補充 網路上有人有遇到循環 GRUB2 而無法進入系統的情形，詳情可參考此篇：https://www.ubuntu-tw.org/modules/newbb/viewtopic.php?post_id=209042 筆者建議可以安裝 Psensor 這個圖形化的軟體，在安裝完成後的一段時間，觀測硬體溫度。^15 sudo apt-get install lm-sensors hddtemp sudo sensors-detect sensors 接著，順利進入安裝程序後後，卻發現無法正確抓到 NVME SSD。釐清問題 — NVME SSD根據這篇文章把 Ubuntu 16.04 及 18.04 安裝到幾款特殊的 NVMe SSD^16 上，可以知道大概是 APST(Autonomous Power State Transitions) 的問題，可見作者在 Arch Linux Wiki 上可以找到解決方法 問題的發生 而問題的細節是因為 NVME 的省電模式似乎因為驅動的問題而掛了，近一步可以閱讀PMC NVMe主控动态电源管理^17理解更多有關於 NVME 電源管理代碼的問題。 問題的解決 在剛剛相同的頁面，相同行，空格後接續補上此參數nvme_core.default_ps_max_latency_us=5500 開機後 installer 就能偵測到 NVMe SSD 了。 因為 Ubuntu 預設是不會出現 GRUB 選單，會自動進入系統，所以安裝完第一次開機時要按住 shift 強制讓 GRUB 出現，再次加上 nvme_core.default_ps_max_latency_us=5500 參數開機，如果不加上還是能進系統，但會隨機遇到系統完全 hang 住無法動彈，只能強制重新開機的狀況，例如執行 lscpi uname 等指令都有可能引發。 成功第一次穩定進入系統，要去編輯 /etc/default/grub 把 nvme_core.default_ps_max_latency_us=5500 參數加上去，再執行 sudo update-grub 更新 GRUB 設定。結論至此為止，已經成功了安裝必備的基本環境，可開始 Ubuntu 18.04 的機器學習之旅。接著，可以開始安裝相對應的 CUDA 以及 cuDNN，以及自己熟悉的機器學習框架與庫，Here we go！","link":"/2019/09/13/%E5%AE%8C%E6%95%B4%E5%AD%B8%E7%BF%92%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E5%AF%A6%E9%8C%841%E2%80%94%E2%80%94%E5%AE%89%E8%A3%9D-Ubuntu-18-04/"},{"title":"完整學習機器學習實錄2——安裝 Nvidia 機器學習環境","text":"完整學習機器學習實錄2——安裝 Nvidia 機器學習環境tags : 完整學習機器學習實錄前言 —— 本文值得一讀之處 本篇將繼續介紹，如何以一個有效的思路，成功的安裝 Nvidia 機器學習環境。 不同於其他文章，本篇以概觀介紹為主、細節為輔，希望以清晰的思路，培養大家思考的能力；跳脫 step by step 的框架，使未來的學習中能夠以飛快的速度向前，即便遇到版本更新、也得以與時俱進。不再拘泥於完善的教程，也得以不斷自我成長。 前情提要在上一篇完整學習機器學習實錄 1 —— 安裝 Ubuntu 18.04 ，我們安裝 Ubuntu 18.04 系統於 X299 及 1080ti 上，同時記錄了幾個有關於 ACPI 及 NVME 的基本知識和問題迴避。 這次，將來安裝學習機器學習時，最常遇見的環境坑，在 N 卡的環境上，需要安裝的包含顯示卡的驅動程式，Nvidia 提供的 CUDA 與 cuDNN，以及機器學習的套件包，舉凡 Tensorflow、caffe 等。在這裡以 Tensorflow 為例。 在安裝前如果讀者有閱讀過其他文章，想必非常清楚這三者 Tensorflow, CUDA, cuDNN 的安裝順序通常是先安裝 CUDA 然後補上 cuDNN 的 lib，最後再以 Python 套件的形式，安裝 Tensorflow ，而實際執行上，這樣的順序的確是良好的。 但是，於思考的邏輯上，依照這個順序去選擇安裝版本、去查資料，卻容易造成嚴重的版本錯誤，理由是，Tensorflow 依賴 CUDA 去調用 GPU，而 CUDA 又需要 cuDNN 作為 library 來實現深度神經網路。所以，要成功的安裝學習環境，也是就是要能順利運行 Tensorflow ： 必須依照 Tensorflow 的需求，去安裝相對應的 CUDA ，再依照 CUDA 的需求，去選擇對應的 cuDNN 作為函數庫。 在這邊，容我對 Tensorflow CUDA cuDNN 稍作展開，避免讀者在接下來的學習中遇到相關問題沒了個底。 Tensorflow想必會來閱讀這篇文章的大家，對於 Tensorflow 肯定是耳熟能詳了，但是 Tensorflow 的本質究竟是什麼？在接下來的段落裡，我們希望讓大家對於 Tensorflow 能夠有更近一步的認識，而不再是 ： Tensoflow？ 做機器學習的啊？ 打開 Tensorflow 官網，我們便能清晰地看到官方對於 Tensorflow 的定位，An open source machine learning framework for everyone. 就我的理解為，「一個面向所有人的、開源的、機器學習框架。」 其實不止 Tensorflow ，多數的軟體都有這麼一句話，位於官網的顯眼處，只要你願意去打開官網，就能夠快速地理解其究竟是什麼定位，能夠拿來解決什麼問題？ 是的，Tensorflow 是一個機器學習的「框架」framework，框架是一個大家公認的規範，也就是在茫茫程式大海中，你可以有自己的習慣、有自己的開發方式、有自己的 API 接法等等。但是，若你與大家使用了共同的規範、共同的習慣，那所有人開發起來就會方便許多，你們可以共用某支程式，共用某些 API ，彼此間也能夠迅速成長。 而 Tensorflow 究竟定義了什麼樣的規範，使之成為機器學習的框架呢？其實官網往下轉，就給出了我們想知道的答案。 這段告訴你，Tensorflow 既是一個機器學習的框架，更是一個實現機器學習算法的接口。 就高層次而言，Tensorflow 主要提供您： 以計算圖的思考方式，去規劃與設計機器學習。 以 session 作為一個窗口，讓使用者快速的設計計算圖。 就低層次的意義而言， Tensorflow 實現了以下幾點： 消弭了不同 CPU、GPU 及更多類型間的硬體差異。 實現了多 worker（不同電腦）、多 device（多張 GPU）的優化，包括記憶體、運算核心、資料傳遞等。 實現了自動的反向傳播算法，由 Tensorflow 去智能計算反向傳播。 性能優化：包括了一些計算庫及不同的並行運算方式。 這邊大略的提到它的功用，至於再往下展開，就是如合實現這些目標的概念解釋，有興趣得讀者，可以參考 「Tensorflow 實戰」，這本書，裡頭開篇便有詳細的說明。 CUDAcuDNNhttps://www.tensorflow.org/https://developer.nvidia.com/cudnn","link":"/2019/09/13/%E5%AE%8C%E6%95%B4%E5%AD%B8%E7%BF%92%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E5%AF%A6%E9%8C%842%E2%80%94%E2%80%94%E5%AE%89%E8%A3%9D-Nvidia-%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E7%92%B0%E5%A2%83/"},{"title":"影像辨識&#x2F;機器學習連結","text":"影像辨識/機器學習連結tags: 機器學習活動主旨 活動綱要 會議記錄 機器學習會議 學習紀錄 Super Resolution 進度報告 panda 神經網路共筆 甚麼是機器學習by一毛 sklearn簡易教學 貓雄?熊貓?傻傻分不清楚 機器學習-線性回歸之簡單線性回歸 資源 數據預處理 ==大量資源== 詳盡的tensorflow安裝教學by海豹 範例 名詞解釋 [name=廖勗宏] 數據分析 線上教學 Sentdex Youtube的教學 全英文 Kaggle 企業和研究者可在其上發布數據，統計學者和數據挖掘專家可在其上進行競賽以產生最好的模型 Data+ (找不到網址…) 如何學習的參考文章 聽說五天學完機器學習 李宏毅 待補充 莫凡 待補充 ==付費==Python 資料分析＆機器學習入門 Hahow ==付費==机器学习 A-Z (Machine Learning A-Z in Chinese) Udemy Google Machine Learning 推薦書單 [name= 海豹] 初探機器學習：使用Python 海豹曰: 「序都是幹話」 精通機器學習：使用Python [name= 黃俊諺] Python機器學習 Deep Learning：用Python進行深度學習的基礎理論實作","link":"/2018/08/03/%E5%BD%B1%E5%83%8F%E8%BE%A8%E8%AD%98-%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E9%80%A3%E7%B5%90/"},{"title":"清大實驗教育 2019 分享會","text":"實驗教育政治大學 鄭同僚教授前言五成民眾不滿意國中小教學品質 工程實做 學長 國中自製各種神奇鉛筆盒 高中風洞模擬等實驗 找到想做的事情， 要解決的問題， 再去把知識補起來 下二上 認真讀書考試 ARRC FSAE 二下實驗教育 PBL 問題導向學習 在家的實驗：探索我的實驗 國高中的實驗：確認興趣獲得成就感 大學的實驗：培養興趣成為技能 有人想讀研究所ㄇ？ 看到一張理學院學識的畢業證書可能不會有人收我？（明指台大） 但是我整天都在實驗室和實驗助理沒有 gap 的討論事情。 無題 沒有一句話能夠統整這兩年來的事情 12家長不能理解為啥不看參加科學營，而要來參加探索營不只要看體制，而是看體制前和體制後帶給你哪些改變？ 實驗教育可以有兩種解讀 一種是實驗新的教育方式 一種是實驗自己的人生 我們有些人是定好目標，用體制外的方式走向夢想我們也有些人是在實驗教育中摸索學習、成長。","link":"/2019/09/11/%E6%B8%85%E5%A4%A7%E5%AF%A6%E9%A9%97%E6%95%99%E8%82%B2-2019-%E5%88%86%E4%BA%AB%E6%9C%83/"},{"title":"自主學習暨程設教育經驗分享會-「台灣社會創新發展趨勢」","text":"自主學習暨程設教育經驗分享會 -「台灣社會創新發展趨勢」Author : 牟展佑 William Mou 12345678910111213【活動資訊】【主 題】：自主學習暨程設教育經驗分享會 -「台灣社會創新發展趨勢」【演 講 者】：唐鳳【時 間】：12/21 (五) 19:00 ~ 21:00 (18:30 開放進場)【地 點】：臺北科技大學 共同科館 B1 演講廳【人數上限】：160人【主辦單位】：教資中心 x 程式設計研究社----------唐鳳是誰？唐鳳，35歲入閣，成為行政院有史以來最年輕的政務委員，任內成功利用視訊直播等科技做為突破，代表中華民國參與聯合國會議，最高學歷只有國中肄業，14歲起在家自學，被譽為「臺灣電腦十大高手」，曾在矽谷創業，也是g0v零時政府的核心成員。透過本次「台灣社會創新發展趨勢」的分享，唐鳳亦將帶入其在自學、程式方面的自身經驗。本次活動為&quot;全程Q&amp;A&quot;，不論是對自學、程設教育、社會企業、開放政府... 有興趣的人皆歡迎參加。 自由提問！對於網路上的假消息及不實訊息該如何處理呢？政府謠言的部分 有爭議的言論受到關注，全世界都依樣但是言論自由是台灣的核心價值，不能先審即時處理爭議訊息可確保公共對話空間 空間上難以被控制 時間上盡力去協調 入閣後希望盡力使各部會與民意交流，60分鐘內踹共，版面上不能平衡，但時間上可以平衡 隔著 Video 難以說明，但是唐鳳每週三在空軍總部，任何人都可以來找我，有什麼事情都可以即時澄清。 其他謠言的部分G0V謠言系統 要跟長輩說明不容易，但是讓長輩自己去發現比較容易，這樣有助於處近家庭和諧 這有點像是心靈的疫苗，在假訊息沒這麼強的時候，先讓大家有印象，之後再看到時就會有警惕 完全獨立的中心，ifcn 國際事實確認網路，只要加入這個網路，就可以獲得演算法的設定權，類似於 mail 垃圾信的判斷機制。 自發性舉報 查證 調整演算法 這並沒有違背言論自由，因為透過指定網址或是塗鴉牆還是能看到，不會有下架或事先審的問題 老師您好，請問您對於網紅帶風向的看法？不要逆風而行 大家都是關心同一個議題的 經濟面 政治面 等等乘著這個風向，一同解決問題。 邀請會吵的朋友，不是有糖吃，而是進廚房。 讓大家獲得入場券，大家一起改善問題。 會吵的朋友，不是有糖吃，會炒的朋友，進廚房。 對於風向，要乘風而起，不是逆風而飛 老師您好，請問您認為除軟體工程師以外，在各行各業需要具備何種程度的程式語言能力？ 設計背景的朋友懂一點程設沒有不好 建議使用 scratch or processing 等不會有這麼高的挫折感，一拿到就是會動的。 請問要如何維持自主學習的熱忱與動力？ 學習的初衷通常是想要弄懂一個東西，學會了一部分後就會認為「就這樣啊」 所以就像火箭一樣，一段一段發射需要獲得補充包。 舉例而言，研究一輛三輪自駕車 一開始是「好奇」，但是好奇過後 我們可以嘗試去「創造」，例如三輪自駕車的表達與使用方式等 透過這些創造我們會去學習新的領域，進而產生更多的好奇心 如此產生一個循環！ 老師，請問您對於python使用率最近超過c++的看法 怎麼現在才超過（？） 代表想用程式改變生活的人越來越多 推薦使用 Sikuli 簡化生活解決一些生活中很冗的事情老師您好，請問您認為除軟體工程師以外，在各行各業需要具備何種程度的程式語言能力？ 會使用 Sikuli 就是很好的。 透過檢視工作流程是冗的地方 實現，工作流程再設計 對於生活中覺得自己像是工作人的那部分，應該交給真正的工具做。 為何選舉不電子化？ 因為黨派在驗票的時候，要使各黨籍說服所有候選人，但密碼學拿以說服別人，這不是一個技術問題，是一個社會學問題。 公投可能可以引進部分電子票，例如打孔的紙片，透過光學驗鈔機等技術，可以讓選務人員輕鬆一點，我認為這是一個未來可以改進的問題 中選會是獨立機關，以上言論還是以中選會為準… 請問臺灣和其他國家比較，開放政府的程度在什麼階段？ transparency participation 公民參與 這對我們來說是因為大家認為民主是很新的東西 大家很願意去做電子連署等等新興的事務 對於這些新興事物有興趣是許多老牌民主國家難以達成的 公共政策參與平台 審計部門通常因為沒有先例等為由，所以不易放行 透過公共政策參與平台，審計部可以詢問大家的疑慮 透過這些疑慮，跑來問委員，解決疑慮，確保新的審計原則 一方面沒有擋住行政部創新 一方面也沒有違反人民的疑慮 這些是新興民主紅利。 accountability 給個交代，找得到人處理 inclusion 各種不同文化語言背景的朋友，都可以有接取的權利 您認為台灣教育環境有哪些問題？應該如何改善？ 從下次開始，以素養導向，而非技能導向與十年前的課綱相比，不再強調個人與個人的競爭力過往如同透過技能畫許多跑道，鳴槍起跑我們決定不再教小孩這種 自發 想去了解 互動 與不同領域的朋友共同打怪 共好 不把別人當作工具人，互相學習、彼此討論 鳴槍起跑後，小孩轉身跑向自己的方向只要是有興趣的人會跑向共同的方向所有小孩可以跑向自己的目標，同時認識許多朋友 高等教育部分 過往以學系為主 新的以學程為主 以後可能不再是某學系的畢業證書，而是一個技能樹，你拿著這顆畢業證書技能樹，可你說明你結合了什麼東西。 以後每個學生把學校當作獲得資源的地方，教授等等不再是裁判。希望大家救救上一代，讓家長別輸在終點 請問您覺得對岸在此次選舉在網軍上的操作的看法?這個是目前的立法缺陷，已經立法希望盡快三讀通過，禁止境外資金資助廣告。 台灣政府對於區塊鏈或加密貨幣的發展，有哪些政策措施呀？ 分兩部份討論 分散式帳本政府一直在用分散式帳本，舉例而言： 大家可花很便宜2~3000買一個空氣盒子 上傳到中研院老師的平台共享數據 一眼就可以看到台灣空氣品質的地圖 其他國家 在周圍亞洲，很多社會學家無法去挑戰政府，不要說 2000 個， 20個可能就要去喝茶，200個可能必須加入政府，再不加入政府可能就要被消失了。 台灣實際作為 中央保持著打不過就加入的精神，不論如何，大家是一個夥伴關係 中央已經將這個網路放到 github 上 我們會將所有資料備份到國網中心上，讓所有人可以用相同的資料做預測，CI 網站連結解決問題 為什麼環團會相信國家這樣用他們的資料而不去竄改呢？ 透過分散式帳本，做一個快照，讓國網中心若要竄改數字，民間就會知道了 其實國網中心原本就不會竄改數字。 這樣讓大家相信 CI 上面的資料，就是大家上傳的資料。 ap-buster 也是個非常有潛力的朋友 加密貨幣把加密貨幣交換法幣，是只有與洗錢相關才會受到管制，其他的不會受到限制此外也衍伸一個議題：金融沙盒 若無法修法，可以先花一年違法 透過社會創新，帶領法律創新 法務部希望提醒大家不要資助恐怖份子、洗錢兩項，其他都是允許大家創新 想請問一下，程式設計師的身份對於您參政議政有什麼幫助和影響呢？ 減少重複的事情，如果有一件事情是浪費同仁的青春的，大家都可以花更多時間去做有意義的事情 舉例而言，sandstorm.io 就是一個不錯的選擇。 程式設計，重要的是設計不是程式，重要的是設計，設計就是設想、計畫，這並不是程式的專利。 你覺得大學應該帶給學生什麼方面的教育？在你的理想狀況下，什麼樣的人適合就讀大學，什麼樣的人適合高中職或五專畢業後直接就業？ 在我理想中，這兩個是不互相排斥的 高職已經改叫技術高中 新課綱設計時，高一去互轉都不需要付出太大代價 現在大學的選修，提早到高中辦理，因為少子女化，所以師資可以移到選修去用。 大家可以先去做一些事情兩年後，再進大學去學習，透過這樣的方式，讓大家在刑法上成年民法上未成年的兩年，去尋找自己的志願，創造大家並不需要同時念大學的意念。 大學的用途 大學應該是一個地方的智庫，結合整個地方資源，提供給大學，透過大學與社會的結合，使大家是認識社會，而非成為一個象牙塔，明年會有個地方的國家型戰略計劃，讓大學成為如上所述，這樣謉大學而言能解決少子化等問題。 未來是否應該學習一門新語言 很多新型態的語言慢慢誕生，例如Golang或Swift等等的，是否有必要去嘗試接觸新語言。 周圍朋友學什麼，你就學什麼，因為語言多數時間不是寫給電腦看的，而是寫給人看的，彼此間討論，才能帶給語言更多得活力。 如果你是看到新語言就去學的人，最後你的社群就是喜歡研究新語言的人，如果你是個喜歡學新語言的程式愛好者的話，歡迎跟我聯絡，因為我也是。 若不是，去學習一個你周圍有人用的語言，加深加廣，對你而言是更好的。 請問童年的霸凌是否對您未來的人生有任何影響？ 一定有重大的影響，而且一定是好的。 因為當年我曾經有被霸凌，但是我是以一個成年的思想去看待。 理解他們家庭教育是有線性的經濟、線性的學習 對我而言，這些霸凌，是因為我的存在對他們有不舒服的部分。 也了解到他們是因為有拼經濟、拼第一名的思想。 這也使我很早就跳脫線性學習拼命的迷霧。 推廣開源的困難重重 希望一般課厭能簡單開源。 但從簡單的Github使用到同學們高傲的心，處處都是困難。 一般同學沒能力，但連Github都不知道怎麼使用，常常就算開源了也就直接把東西下載後交出去。 有能力的同學很多都抱有著『自己寫好就好，為什麼要開源或幫助他人。』這樣自私且高傲的心。 因為絕大部分人，是從開源社群學習 所以自己寫好就好，並不是不行 因為自己寫好要自己維護，當有開放給大家的覺悟後，就有更多時間去開發新的東西 其實你並不需要透過道德的角度去說服，可以透過經濟的角度去分析。 如果你不開源出來，就要自己維護 mozilla 就是 netscape 轉型成功的例子。 不一定要大公無私，可以先小私有公，讓他在開源的同時，體驗到助人為快樂之本。 指導教授綁架學生的畢業證書的問題（不幫我做什麼就不簽名等），是否有改善的方法？ 一般的談判方式，要有一個 batna 歡迎大家多玩博弈理論的遊戲，可以透過策略訓練自己 但畢竟我沒有唸過大學，只是旁聽。 政府在郷下與都市間如何解決資訊不對稱 讓中央公務員可以在地方工作 透過實驗計畫建立新的方式 透過網路參與到知識生產或意義生產 透過這樣的方式，讓人流回需要創新的地方 老師的口才能力是如何培養的？ 每個星期講五場演講AI taiwancibiosmart 每次我被問倒，回去就會開一個網站來回答大家的問題 要不要用義務教育都是你自己的選擇，只要你寫出你的實驗教育構想書，就可以用你想要的方式去完成你自己的教育 我們也讓課綱開課的權利下放到各學校，這樣學校就可以開放許多特色專班、課程，只要與學系的課發會一起開發課程就可以了 我們認為是社區與其工作者，和老師一起去討論與開發學習的方向 請問台灣5g發展的如何 台灣在 5G 的應用，透過依照地方所需，開實驗室應用，來測試這樣的應用是否真的合用 接下來會可能多達上百個場域，用類似的頻段，但因為空間有隔開，所以可以進行各種測試。 舉例而言我很喜歡VR，這樣可以讓一個人可以在一個房間中去控制所有怪手，也可以快速累積機器學習資料，這樣可以錄下所有怪手判斷，這樣可以很容易培育出機器副駕駛等。 全力支持，絕不主導owo 請問平常都幾點睡覺 睡滿8小時0點睡 8點起 需要睡夠 8hr 才能夠使短期記憶寫入長期記憶。 想要精通某種程式語言，需要不斷的練習， 那麼有甚麼方法是最有效率的呢？挑一個大的專案，去學習與修改，當瞭解到自己的影響力非常大時，就能夠去支持自己。 facebook 搜尋而不是被動觀看https://addons.mozilla.org/zh-TW/firefox/addon/news-feed-eradicator/ 我永遠都是 well intentioned。用FB不是被動的，而是我想要做什麼，才去用 fb sli.do 可以讓大家注意力放在彼此身上，讓按讚，留言等放在 sli.do 上，可以彼此關心，而非陷入自己的世界，這也是一種 social technology 台灣學子 到了高等教育還是有絕大部分的人 不清楚自己的未來在哪 請問講師 台灣的教育有什麼問題 與有沒有什麼解決辦法 教育本來就無法找到興趣，興趣只在孩子的心理。 我們唯一能創照的是一個不扼殺孩子興趣的系統 讓大家的學習有興趣的事物時不會有大量的成本 社會獎賞的系統，不再是獎賞乖小孩，而是獎賞創新的孩子。 過去把兩者放到同一個教育環境中，而現在讓教學工作者了解後，可以讓教師們理解與進入終身學習與創造的世界、熱情，對在地的社會脈絡進行直接的貢獻。 對於少子化造成的大學倒閉潮，政府需要怎麼因應？同上能夠 運用學程 與社會結合 與學生學習 的大學更能夠在這波少子化中生存 怎樣能成為你們的實習生？https://ray.pdis.nat.gov.tw/有 2/3 的朋友要找出問題有 1/3 是要解決問題 所以大家都可以來，暑假時關注 rich 職場體驗網 常使用套件或套件生成的程式碼 例如Pyhton的撰寫，常常會伴隨著大量的套件。 也常常被笑說Python是一般沒程式接處的人在學的。 套件的方便性有目共睹，資工的老師也說過『不要重造輪子』。 那到底應該如何看待使用套件這件事。平常心。抱持著平常心來看待這件事情，使用套件是再平常不過的事情 聽說唐鳳老師小時候就在學程式語言， 那麼以前是如何自我學習程式語言呢？我當初自己按鍵盤，不需要電腦也可以學會電腦怎麼想事情。不過我那樣沒有多久，我媽就看我可憐，給我買了一台電腦。當初我非常喜歡數學，但不喜歡算數，所以我把電腦看成一種工具。 有了新的教育方案 但師資的部分很多都還是以傳統觀念教導 有什麼辦法可以改善嗎 希望大家不要對老師放棄希望，透過共同備課、線上等，通過重新訓練，可以讓學校的課發揮功能，以前老師只是國教館的單位，而現在則是老師需要有自己一套教法。 很多老師也開始想要試試看新的一種教材方法。 台股有什麼好公司可以入手？我沒有做過這方面的工作 請問老師為什麼台灣要廢核能？那些反核的人都不吹冷氣嗎？ 大家對於核能都有不同的看法，有空可以看看「能源轉型白皮書」 透過開放資料的方式去公布在這個網站上。 如果在場各位對於核子能有興趣的，可以投入第四代反應爐研究，解決核廢料、核擴散等 雖然你很難改變大家的立場，但是可以和平的討論，來改變大家的感受。","link":"/2018/12/21/%E8%87%AA%E4%B8%BB%E5%AD%B8%E7%BF%92%E6%9A%A8%E7%A8%8B%E8%A8%AD%E6%95%99%E8%82%B2%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB%E6%9C%83-%E3%80%8C%E5%8F%B0%E7%81%A3%E7%A4%BE%E6%9C%83%E5%89%B5%E6%96%B0%E7%99%BC%E5%B1%95%E8%B6%A8%E5%8B%A2%E3%80%8D/"}],"tags":[{"name":"AIJT","slug":"AIJT","link":"/tags/AIJT/"},{"name":"機器學習","slug":"機器學習","link":"/tags/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"},{"name":"資安","slug":"資安","link":"/tags/%E8%B3%87%E5%AE%89/"},{"name":"經驗分享","slug":"經驗分享","link":"/tags/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"},{"name":"GCP","slug":"GCP","link":"/tags/GCP/"},{"name":"HITCON","slug":"HITCON","link":"/tags/HITCON/"},{"name":"區塊鏈","slug":"區塊鏈","link":"/tags/%E5%8D%80%E5%A1%8A%E9%8F%88/"},{"name":"Microsoft","slug":"Microsoft","link":"/tags/Microsoft/"},{"name":"ChatBot","slug":"ChatBot","link":"/tags/ChatBot/"},{"name":"Telegram","slug":"Telegram","link":"/tags/Telegram/"},{"name":"研討會","slug":"研討會","link":"/tags/%E7%A0%94%E8%A8%8E%E6%9C%83/"},{"name":"TensorFlow","slug":"TensorFlow","link":"/tags/TensorFlow/"},{"name":"GPU","slug":"GPU","link":"/tags/GPU/"},{"name":"Firefox","slug":"Firefox","link":"/tags/Firefox/"},{"name":"Web","slug":"Web","link":"/tags/Web/"},{"name":"Myself","slug":"Myself","link":"/tags/Myself/"},{"name":"完整學習機器學習實錄","slug":"完整學習機器學習實錄","link":"/tags/%E5%AE%8C%E6%95%B4%E5%AD%B8%E7%BF%92%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E5%AF%A6%E9%8C%84/"},{"name":"影像辨識","slug":"影像辨識","link":"/tags/%E5%BD%B1%E5%83%8F%E8%BE%A8%E8%AD%98/"},{"name":"實驗教育","slug":"實驗教育","link":"/tags/%E5%AF%A6%E9%A9%97%E6%95%99%E8%82%B2/"},{"name":"NTHU","slug":"NTHU","link":"/tags/NTHU/"},{"name":"唐鳳","slug":"唐鳳","link":"/tags/%E5%94%90%E9%B3%B3/"},{"name":"自學","slug":"自學","link":"/tags/%E8%87%AA%E5%AD%B8/"}],"categories":[{"name":"機器學習","slug":"機器學習","link":"/categories/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"},{"name":"資訊安全","slug":"資訊安全","link":"/categories/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8/"},{"name":"資訊講座","slug":"資訊講座","link":"/categories/%E8%B3%87%E8%A8%8A%E8%AC%9B%E5%BA%A7/"},{"name":"Blockchain","slug":"Blockchain","link":"/categories/Blockchain/"},{"name":"SITCON","slug":"SITCON","link":"/categories/SITCON/"},{"name":"經驗資源","slug":"經驗資源","link":"/categories/%E7%B6%93%E9%A9%97%E8%B3%87%E6%BA%90/"}]}